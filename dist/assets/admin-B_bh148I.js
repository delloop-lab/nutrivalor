import{g as _,s as d,l as b,i as E,a as f,b as h}from"./main-C3mX7JQu.js";let y=[],g=[],u=null;async function x(){try{await L(),await m(),await B()}catch(e){console.error("‚ùå Error initializing admin panel:",e),a("Error initializing admin panel","error")}}async function L(){const e=document.getElementById("currentUserRole");if(e)try{const r=await _();e.textContent=r.charAt(0).toUpperCase()+r.slice(1).replace("_"," "),e.className=`role-badge ${r}`}catch(r){console.error("Error updating role display:",r),e.textContent="User",e.className="role-badge user"}}async function m(){const e=document.getElementById("userListContainer");if(e)try{e.innerHTML='<div class="loading-users">Loading users...</div>';const{data:r,error:o}=await d.from("user_management").select("*").order("user_created_at",{ascending:!1});if(o){e.innerHTML='<div class="error-message">Error loading users</div>';return}y=r||[],$(y)}catch{e.innerHTML='<div class="error-message">Error loading users</div>'}}function $(e){const r=document.getElementById("userListContainer");if(!r)return;if(e.length===0){r.innerHTML='<div class="empty-state">No users found</div>';return}const o=e.map(t=>{const n=new Date(t.user_created_at).toLocaleDateString(),i=t.last_sign_in_at?new Date(t.last_sign_in_at).toLocaleDateString():"Never",s=t.email_confirmed_at?"Confirmed":"Pending",l=t.role==="super_admin"?"super-admin":t.role;return`
      <div class="user-item" data-user-id="${t.id}">
        <div class="user-info">
          <div class="user-email">${t.email}</div>
          <div class="user-meta">
            <span class="user-status ${s.toLowerCase()}">${s}</span>
            <span class="user-join-date">Joined: ${n}</span>
            <span class="user-last-login">Last login: ${i}</span>
          </div>
        </div>
        
        <div class="user-role-section">
          <span class="current-role ${l}">${t.role.replace("_"," ").toUpperCase()}</span>
          <div class="role-actions">
            ${A(t)}
          </div>
        </div>
      </div>
    `}).join("");r.innerHTML=o}function A(e){return`
    <button 
      onclick="toggleUserRole('${e.id}', '${e.email}', '${e.role}')" 
      class="role-btn ${e.role==="admin"||e.role==="super_admin"?"revoke":"grant"}"
      id="roleBtn_${e.id}"
    >
      ${e.role==="admin"||e.role==="super_admin"?"Revoke Admin":"Make Admin"}
    </button>
    
    <!-- Delete User Button (Testing Only) -->
    <button 
      onclick="deleteUserAccount('${e.id}', '${e.email}')" 
      class="role-btn revoke"
      style="background: linear-gradient(135deg, #991b1b 0%, #ef4444 100%); margin-left: 10px;"
      title="‚ö†Ô∏è Testing Only: Delete User Account"
    >
      Delete User
    </button>
  `}async function C(e,r,o){var t;try{if(!await h()){a("Only Super Admins can manage user roles","error");return}if(o==="super_admin"){a("Super Admin roles cannot be changed","error");return}const i=o==="admin"?"user":"admin",s=i==="admin"?"grant":"revoke";if(!confirm(`Are you sure you want to ${s} admin privileges ${i==="admin"?"to":"from"} ${r}?`))return;const{error:c}=await d.from("user_roles").upsert({user_id:e,role:i,granted_by:(t=await f())==null?void 0:t.id});if(c){console.error("Error updating user role:",c),a("Error updating user role","error");return}a(`Successfully ${s==="grant"?"granted":"revoked"} admin privileges ${s==="grant"?"to":"from"} ${r}`,"success"),await m()}catch(n){console.error("Error toggling user role:",n),a("Error updating user role","error")}}async function M(e,r){try{if(!await h()){a("Only Super Admins can delete user accounts","error");return}if(!confirm(`‚ö†Ô∏è WARNING: Are you absolutely sure you want to delete the account for ${r}?

This will permanently remove:
- User authentication data
- User profile
- All associated data (foods, meals, weight entries, etc.)

This action CANNOT be undone!`)||!confirm(`‚ö†Ô∏è FINAL WARNING: This will permanently delete ${r}'s account and ALL associated data.

Type 'DELETE' to confirm:`))return;a("Deleting user account and associated data...","info");try{await Promise.all([d.from("user_profiles").delete().eq("user_id",e),d.from("foods").delete().eq("user_id",e),d.from("meals").delete().eq("user_id",e),d.from("shopping_list").delete().eq("user_id",e),d.from("weight_entries").delete().eq("user_id",e),d.from("user_roles").delete().eq("user_id",e)]);const{error:i}=await d.auth.admin.deleteUser(e);if(i){console.error("Error deleting user authentication record:",i),a(`Error deleting user authentication: ${i.message}`,"error");return}a(`User account ${r} has been deleted successfully`,"success"),await m()}catch(i){console.error("Error deleting user account:",i),a(`Error deleting user account: ${i.message}`,"error")}}catch(o){console.error("Error in deleteUserAccount:",o),a(`Error: ${o.message}`,"error")}}async function U(){await m(),a("User list refreshed","success")}function a(e,r="success"){let o=document.getElementById("admin-message");if(!o){o=document.createElement("div"),o.id="admin-message",o.className="message";const t=document.getElementById("admin")||document.body;t.insertBefore(o,t.firstChild)}o.textContent=e,o.className=`message ${r}`,o.style.display="block",setTimeout(()=>{o&&(o.style.display="none")},4e3)}async function v(){try{console.log("üçé Loading foods for edit dropdown...");const{data:e,error:r}=await d.from("foods").select("*").order("name");if(r){console.error("Error loading foods:",r),a("Error loading foods for editing","error");return}g=e||[];const o=document.getElementById("foodSelectDropdown");if(!o){console.warn("Food select dropdown not found");return}o.innerHTML='<option value="">Choose a food to edit...</option>',e==null||e.forEach(t=>{const n=document.createElement("option");n.value=t.id,n.textContent=t.brand?`${t.name} (${t.brand})`:t.name,o.appendChild(n)}),console.log(`üìä Loaded ${(e==null?void 0:e.length)||0} foods for editing`)}catch(e){console.error("Error loading foods for dropdown:",e),a("Error loading foods","error")}}async function B(){try{await b(),I()}catch{}}function I(){const e=document.getElementById("addFoodForm");e&&e.addEventListener("submit",N);const r=document.getElementById("foodName"),o=document.getElementById("foodBrand");r&&r.addEventListener("input",w),o&&o.addEventListener("input",w)}async function w(){const e=document.getElementById("foodName"),r=document.getElementById("foodBrand"),o=document.getElementById("duplicateWarning");if(!e||!o)return;const t=e.value.trim(),n=(r==null?void 0:r.value.trim())||"";if(!t){o.style.display="none";return}try{let i=d.from("foods").select("id, name, brand").ilike("name",t);n&&(i=i.ilike("brand",n));const{data:s,error:l}=await i;if(l){console.error("Error checking for duplicates:",l);return}(s==null?void 0:s.some(p=>p.name.toLowerCase()===t.toLowerCase()&&(p.brand||"").toLowerCase()===n.toLowerCase()))?o.style.display="block":o.style.display="none"}catch(i){console.error("Error checking for duplicates:",i),o.style.display="none"}}async function N(e){e.preventDefault();try{if(!await E()){a("Only admins can add food items","error");return}const o=e.target,t=new FormData(o),n=await f();let i="Admin User";if(n)try{const{data:c}=await d.from("user_profiles").select("name").eq("user_id",n.id).single();i=(c==null?void 0:c.name)||n.email||"Admin User"}catch{i=n.email||"Admin User"}const s={name:t.get("foodName"),brand:t.get("foodBrand")||null,carbs:parseFloat(t.get("foodCarbs"))||0,fat:parseFloat(t.get("foodFat"))||0,protein:parseFloat(t.get("foodProtein"))||0,category:t.get("foodCategory")||"OTHER",created_by:i,user_id:null};if(!s.name.trim()){a("Food name is required","error");return}console.log("üçé Adding food with data:",s);const{error:l}=await d.from("foods").insert(s);if(l){console.error("Error adding food:",l),a("Error adding food item","error");return}a(`Successfully added "${s.name}" to the food database`,"success"),typeof window.reloadFoodTracker=="function"&&(console.log("üîÑ Reloading food tracker..."),await window.reloadFoodTracker()),await v(),o.reset()}catch(r){console.error("Error adding food:",r),a("Error adding food item","error")}}async function D(){try{if(!await f()||!await E())return;const{data:o,error:t}=await d.from("meals").select("*").order("name");if(t){console.error("Error loading meals:",t);return}const n=document.getElementById("mealSelectDropdown");if(!n)return;if(n.innerHTML='<option value="">Choose a meal to edit...</option>',!o||o.length===0){n.innerHTML+='<option value="" disabled>No meals available</option>';return}o.forEach(i=>{const s=document.createElement("option");s.value=i.id,s.textContent=`${i.name} (${i.created_by||(i.user_id?"User Recipe":"No Carb Coach")})`,n.appendChild(s)})}catch(e){console.error("Error loading meals for dropdown:",e)}}async function T(e){try{const r=document.getElementById("editMealFormContainer");if(!e){r&&(r.style.display="none"),u=null;return}const{data:o,error:t}=await d.from("meals").select("*").eq("id",e).single();if(t||!o){console.error("Error fetching meal:",t),a("Error loading meal for editing","error");return}u=o,await k(o),r&&(r.style.display="block",r.scrollIntoView({behavior:"smooth"})),console.log("Meal edit form populated with:",o)}catch(r){console.error("Error selecting meal for edit:",r),a("Error loading meal for editing","error")}}async function k(e){const r=document.getElementById("editMealName"),o=document.getElementById("editMealType"),t=document.getElementById("editMealPicture"),n=document.getElementById("editCookingInstructions");r&&(r.value=e.name||""),o&&(o.value=e.meal_type||""),t&&(t.value=e.picture||""),n&&(n.innerHTML=e.cooking_instructions||"");try{const i=typeof e.ingredients=="string"?JSON.parse(e.ingredients):e.ingredients||[];ingredientState.ingredients=i.map(s=>({food_id:s.food_id,food_name:s.food_name||s.name,quantity:s.quantity,instructions:s.instructions||""})),renderIngredientsList()}catch(i){console.error("Error parsing ingredients:",i),ingredientState.ingredients=[],renderIngredientsList()}}function F(){const e=document.getElementById("editMealFormContainer");e&&(e.style.display="none"),u=null}async function S(){if(!u){a("No meal selected for deletion","error");return}if(confirm(`Are you sure you want to delete the meal "${u.name}"?`))try{const{error:r}=await d.from("meals").delete().eq("id",u.id);if(r)throw r;a("Meal deleted successfully","success"),F(),await D()}catch(r){console.error("Error deleting meal:",r),a("Error deleting meal","error")}}async function q(e){try{if(!e)return;const r=g.find(o=>o.id===e);if(!r){a("Food not found","error");return}ingredientState.currentFoodId=e,openIngredientModal("edit_food",null),console.log("Food edit modal opened with:",r)}catch(r){console.error("Error selecting food for edit:",r),a("Error loading food for editing","error")}}function R(){closeIngredientModal();const e=document.getElementById("foodSelectDropdown");e&&(e.value="")}async function H(){const r=document.getElementById("foodSelectDropdown").value;if(!r){a("No food selected for deletion","error");return}const o=g.find(n=>n.id===r);if(!o){a("Food not found","error");return}if(confirm(`Are you sure you want to delete "${o.name}"?`))try{const{error:n}=await d.from("foods").delete().eq("id",r);if(n)throw n;a("Food deleted successfully","success"),closeIngredientModal(),await v()}catch(n){console.error("Error deleting food:",n),a("Error deleting food","error")}}window.selectMealForEdit=T;window.cancelMealEdit=F;window.deleteMealFromEdit=S;window.selectFoodForEdit=q;window.cancelFoodEdit=R;window.deleteFoodFromEdit=H;window.toggleUserRole=C;window.refreshUserList=U;window.deleteUserAccount=M;export{R as cancelFoodEdit,F as cancelMealEdit,H as deleteFoodFromEdit,S as deleteMealFromEdit,M as deleteUserAccount,x as initializeAdmin,B as loadFoodManagement,D as loadMealsForEditDropdown,m as loadUserList,U as refreshUserList,q as selectFoodForEdit,T as selectMealForEdit,a as showMessage,C as toggleUserRole};
//# sourceMappingURL=admin-B_bh148I.js.map
