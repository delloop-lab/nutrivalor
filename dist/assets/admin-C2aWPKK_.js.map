{"version":3,"file":"admin-C2aWPKK_.js","sources":["../../src/js/admin.ts"],"sourcesContent":["import { supabase, getCurrentUser } from './supabase-client';\r\nimport { isCurrentUserSuperAdmin, getCurrentUserRole, isCurrentUserAdmin } from './auth';\r\n\r\n// Admin Module for NutriValor\r\nlet currentUsers: any[] = [];\r\nlet currentFoods: any[] = [];\r\n\r\n// Initialize admin functionality\r\nexport async function initializeAdmin(): Promise<void> {\r\n  console.log('üëë Initializing admin panel...');\r\n  \r\n  // Update role display\r\n  await updateRoleDisplay();\r\n  \r\n  // Load user list\r\n  await loadUserList();\r\n\r\n  // Load food management if user is admin\r\n  const isAdmin = await isCurrentUserAdmin();\r\n  if (isAdmin) {\r\n    await loadFoodManagement();\r\n  }\r\n  \r\n  console.log('‚úÖ Admin panel initialized');\r\n}\r\n\r\n// Update role display\r\nasync function updateRoleDisplay(): Promise<void> {\r\n  const roleElement = document.getElementById('currentUserRole');\r\n  if (!roleElement) return;\r\n  \r\n  try {\r\n    const role = await getCurrentUserRole();\r\n    roleElement.textContent = role.charAt(0).toUpperCase() + role.slice(1).replace('_', ' ');\r\n    roleElement.className = `role-badge ${role}`;\r\n  } catch (error) {\r\n    console.error('Error updating role display:', error);\r\n    roleElement.textContent = 'User';\r\n    roleElement.className = 'role-badge user';\r\n  }\r\n}\r\n\r\n// Load and display user list\r\nexport async function loadUserList(): Promise<void> {\r\n  const container = document.getElementById('userListContainer');\r\n  if (!container) return;\r\n  \r\n  try {\r\n    container.innerHTML = '<div class=\"loading-users\">Loading users...</div>';\r\n    \r\n    const { data: users, error } = await supabase\r\n      .from('user_management')\r\n      .select('*')\r\n      .order('user_created_at', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Error loading users:', error);\r\n      container.innerHTML = '<div class=\"error-message\">Error loading users</div>';\r\n      return;\r\n    }\r\n    \r\n    currentUsers = users || [];\r\n    displayUserList(currentUsers);\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading user list:', error);\r\n    container.innerHTML = '<div class=\"error-message\">Error loading users</div>';\r\n  }\r\n}\r\n\r\n// Display user list\r\nfunction displayUserList(users: any[]): void {\r\n  const container = document.getElementById('userListContainer');\r\n  if (!container) return;\r\n  \r\n  if (users.length === 0) {\r\n    container.innerHTML = '<div class=\"empty-state\">No users found</div>';\r\n    return;\r\n  }\r\n  \r\n  const userListHTML = users.map(user => {\r\n    const joinDate = new Date(user.user_created_at).toLocaleDateString();\r\n    const lastLogin = user.last_sign_in_at \r\n      ? new Date(user.last_sign_in_at).toLocaleDateString() \r\n      : 'Never';\r\n    \r\n    const isConfirmed = user.email_confirmed_at ? 'Confirmed' : 'Pending';\r\n    const roleClass = user.role === 'super_admin' ? 'super-admin' : user.role;\r\n    \r\n    return `\r\n      <div class=\"user-item\" data-user-id=\"${user.id}\">\r\n        <div class=\"user-info\">\r\n          <div class=\"user-email\">${user.email}</div>\r\n          <div class=\"user-meta\">\r\n            <span class=\"user-status ${isConfirmed.toLowerCase()}\">${isConfirmed}</span>\r\n            <span class=\"user-join-date\">Joined: ${joinDate}</span>\r\n            <span class=\"user-last-login\">Last login: ${lastLogin}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"user-role-section\">\r\n          <span class=\"current-role ${roleClass}\">${user.role.replace('_', ' ').toUpperCase()}</span>\r\n          <div class=\"role-actions\">\r\n            ${generateRoleButtons(user)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }).join('');\r\n  \r\n  container.innerHTML = userListHTML;\r\n}\r\n\r\n// Generate role action buttons based on current user's permissions\r\nfunction generateRoleButtons(user: any): string {\r\n  // Only super admins can change roles\r\n  return `\r\n    <button \r\n      onclick=\"toggleUserRole('${user.id}', '${user.email}', '${user.role}')\" \r\n      class=\"role-btn ${user.role === 'admin' || user.role === 'super_admin' ? 'revoke' : 'grant'}\"\r\n      id=\"roleBtn_${user.id}\"\r\n    >\r\n      ${user.role === 'admin' || user.role === 'super_admin' ? 'Revoke Admin' : 'Make Admin'}\r\n    </button>\r\n  `;\r\n}\r\n\r\n// Toggle user role between user and admin\r\nexport async function toggleUserRole(userId: string, email: string, currentRole: string): Promise<void> {\r\n  try {\r\n    // Check if current user is super admin\r\n    const isSuperAdmin = await isCurrentUserSuperAdmin();\r\n    if (!isSuperAdmin) {\r\n      showMessage('Only Super Admins can manage user roles', 'error');\r\n      return;\r\n    }\r\n    \r\n    // Don't allow changing super admin roles\r\n    if (currentRole === 'super_admin') {\r\n      showMessage('Super Admin roles cannot be changed', 'error');\r\n      return;\r\n    }\r\n    \r\n    const newRole = (currentRole === 'admin') ? 'user' : 'admin';\r\n    const action = newRole === 'admin' ? 'grant' : 'revoke';\r\n    \r\n    const confirmed = confirm(\r\n      `Are you sure you want to ${action} admin privileges ${newRole === 'admin' ? 'to' : 'from'} ${email}?`\r\n    );\r\n    \r\n    if (!confirmed) return;\r\n    \r\n    // Update role in database\r\n    const { error } = await supabase\r\n      .from('user_roles')\r\n      .upsert({\r\n        user_id: userId,\r\n        role: newRole,\r\n        granted_by: (await getCurrentUser())?.id\r\n      });\r\n    \r\n    if (error) {\r\n      console.error('Error updating user role:', error);\r\n      showMessage('Error updating user role', 'error');\r\n      return;\r\n    }\r\n    \r\n    showMessage(\r\n      `Successfully ${action === 'grant' ? 'granted' : 'revoked'} admin privileges ${action === 'grant' ? 'to' : 'from'} ${email}`, \r\n      'success'\r\n    );\r\n    \r\n    // Refresh user list\r\n    await loadUserList();\r\n    \r\n  } catch (error) {\r\n    console.error('Error toggling user role:', error);\r\n    showMessage('Error updating user role', 'error');\r\n  }\r\n}\r\n\r\n// Refresh user list\r\nexport async function refreshUserList(): Promise<void> {\r\n  await loadUserList();\r\n  showMessage('User list refreshed', 'success');\r\n}\r\n\r\n// Show message helper\r\nfunction showMessage(message: string, type: 'success' | 'error' | 'info' = 'success'): void {\r\n  // Create or update message element\r\n  let messageEl = document.getElementById('admin-message');\r\n  if (!messageEl) {\r\n    messageEl = document.createElement('div');\r\n    messageEl.id = 'admin-message';\r\n    messageEl.className = 'message';\r\n    const container = document.getElementById('admin') || document.body;\r\n    container.insertBefore(messageEl, container.firstChild);\r\n  }\r\n  \r\n  messageEl.textContent = message;\r\n  messageEl.className = `message ${type}`;\r\n  messageEl.style.display = 'block';\r\n  \r\n  // Hide after 4 seconds\r\n  setTimeout(() => {\r\n    if (messageEl) messageEl.style.display = 'none';\r\n  }, 4000);\r\n}\r\n\r\n// FOOD MANAGEMENT FUNCTIONS\r\n// =====================================================\r\n\r\n// Load and display food management section\r\nexport async function loadFoodManagement(): Promise<void> {\r\n  console.log('üçé Loading food management...');\r\n  setupFoodManagementEventListeners();\r\n}\r\n\r\n// Setup event listeners for food management\r\nfunction setupFoodManagementEventListeners(): void {\r\n  const addFoodForm = document.getElementById('addFoodForm') as HTMLFormElement;\r\n  if (addFoodForm) {\r\n    addFoodForm.addEventListener('submit', handleAddFood);\r\n  }\r\n  \r\n  // Add duplicate detection for food name and brand\r\n  const foodNameInput = document.getElementById('foodName') as HTMLInputElement;\r\n  const foodBrandInput = document.getElementById('foodBrand') as HTMLInputElement;\r\n  \r\n  if (foodNameInput) {\r\n    foodNameInput.addEventListener('input', checkForDuplicates);\r\n  }\r\n  \r\n  if (foodBrandInput) {\r\n    foodBrandInput.addEventListener('input', checkForDuplicates);\r\n  }\r\n}\r\n\r\n// Check for duplicate food items\r\nasync function checkForDuplicates(): Promise<void> {\r\n  const foodNameInput = document.getElementById('foodName') as HTMLInputElement;\r\n  const foodBrandInput = document.getElementById('foodBrand') as HTMLInputElement;\r\n  const duplicateWarning = document.getElementById('duplicateWarning');\r\n  \r\n  if (!foodNameInput || !duplicateWarning) return;\r\n  \r\n  const foodName = foodNameInput.value.trim();\r\n  const foodBrand = foodBrandInput?.value.trim() || '';\r\n  \r\n  // Only check if we have a food name\r\n  if (!foodName) {\r\n    duplicateWarning.style.display = 'none';\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // Search for existing food with same name and brand\r\n    let query = supabase\r\n      .from('foods')\r\n      .select('id, name, brand')\r\n      .ilike('name', foodName);\r\n    \r\n    // If brand is provided, include it in the search\r\n    if (foodBrand) {\r\n      query = query.ilike('brand', foodBrand);\r\n    }\r\n    \r\n    const { data: existingFoods, error } = await query;\r\n    \r\n    if (error) {\r\n      console.error('Error checking for duplicates:', error);\r\n      return;\r\n    }\r\n    \r\n    // Check for exact matches (case-insensitive)\r\n    const duplicateFound = existingFoods?.some(food => \r\n      food.name.toLowerCase() === foodName.toLowerCase() &&\r\n      (food.brand || '').toLowerCase() === foodBrand.toLowerCase()\r\n    );\r\n    \r\n    if (duplicateFound) {\r\n      duplicateWarning.style.display = 'block';\r\n    } else {\r\n      duplicateWarning.style.display = 'none';\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Error checking for duplicates:', error);\r\n    duplicateWarning.style.display = 'none';\r\n  }\r\n}\r\n\r\n// Handle adding new food item\r\nasync function handleAddFood(event: Event): Promise<void> {\r\n  event.preventDefault();\r\n  \r\n  try {\r\n    // Check if current user is admin\r\n    const isAdmin = await isCurrentUserAdmin();\r\n    if (!isAdmin) {\r\n      showMessage('Only admins can add food items', 'error');\r\n      return;\r\n    }\r\n    \r\n    const form = event.target as HTMLFormElement;\r\n    const formData = new FormData(form);\r\n    \r\n    // Get current user for attribution\r\n    const user = await getCurrentUser();\r\n    let createdBy = 'Admin User';\r\n    \r\n    if (user) {\r\n      try {\r\n        const { data: profile } = await supabase\r\n          .from('user_profiles')\r\n          .select('name')\r\n          .eq('user_id', user.id)\r\n          .single();\r\n        \r\n        createdBy = profile?.name || user.email || 'Admin User';\r\n      } catch (error) {\r\n        createdBy = user.email || 'Admin User';\r\n      }\r\n    }\r\n\r\n    // Extract form data\r\n    const foodData = {\r\n      name: formData.get('foodName') as string,\r\n      brand: formData.get('foodBrand') as string || null,\r\n      carbs: parseFloat(formData.get('foodCarbs') as string) || 0,\r\n      fat: parseFloat(formData.get('foodFat') as string) || 0,\r\n      protein: parseFloat(formData.get('foodProtein') as string) || 0,\r\n      category: formData.get('foodCategory') as string || 'OTHER',\r\n      created_by: createdBy,\r\n      user_id: null  // Global food - accessible to all users\r\n    };\r\n    \r\n    // Validate required fields\r\n    if (!foodData.name.trim()) {\r\n      showMessage('Food name is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    console.log('üçé Adding food with data:', foodData);\r\n    \r\n    // Insert food into database\r\n    const { error } = await supabase\r\n      .from('foods')\r\n      .insert(foodData);\r\n    \r\n    if (error) {\r\n      console.error('Error adding food:', error);\r\n      showMessage('Error adding food item', 'error');\r\n      return;\r\n    }\r\n    \r\n    showMessage(`Successfully added \"${foodData.name}\" to the food database`, 'success');\r\n    \r\n    // Reset form\r\n    form.reset();\r\n    \r\n  } catch (error) {\r\n    console.error('Error adding food:', error);\r\n    showMessage('Error adding food item', 'error');\r\n  }\r\n}\r\n\r\n// Make functions available globally\r\n(window as any).toggleUserRole = toggleUserRole;\r\n(window as any).refreshUserList = refreshUserList;\r\n(window as any).initializeAdmin = initializeAdmin;\r\n\r\n// Extend window interface\r\ndeclare global {\r\n  interface Window {\r\n    toggleUserRole: (userId: string, email: string, currentRole: string) => Promise<void>;\r\n    refreshUserList: () => Promise<void>;\r\n    initializeAdmin: () => Promise<void>;\r\n  }\r\n} "],"names":["currentUsers","initializeAdmin","updateRoleDisplay","loadUserList","isCurrentUserAdmin","loadFoodManagement","roleElement","role","getCurrentUserRole","error","container","users","supabase","displayUserList","userListHTML","user","joinDate","lastLogin","isConfirmed","roleClass","generateRoleButtons","toggleUserRole","userId","email","currentRole","isCurrentUserSuperAdmin","showMessage","newRole","action","_a","getCurrentUser","refreshUserList","message","type","messageEl","setupFoodManagementEventListeners","addFoodForm","handleAddFood","foodNameInput","foodBrandInput","checkForDuplicates","duplicateWarning","foodName","foodBrand","query","existingFoods","food","event","form","formData","createdBy","profile","foodData"],"mappings":"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"}