import{g as _,s,l as b,i as E,a as f,b as h}from"./main-Bfd_C6Qe.js";let y=[],g=[],u=null;async function x(){try{await C(),await m(),await B()}catch(e){console.error("‚ùå Error initializing admin panel:",e),i("Error initializing admin panel","error")}}async function C(){const e=document.getElementById("currentUserRole");if(e)try{const r=await _();e.textContent=r.charAt(0).toUpperCase()+r.slice(1).replace("_"," "),e.className=`role-badge ${r}`}catch(r){console.error("Error updating role display:",r),e.textContent="User",e.className="role-badge user"}}async function m(){const e=document.getElementById("userListContainer");if(e)try{e.innerHTML='<div class="loading-users">Loading users...</div>';const{data:r,error:o}=await s.from("user_management").select("*").order("user_created_at",{ascending:!1});if(o){e.innerHTML='<div class="error-message">Error loading users</div>';return}y=r||[],$(y)}catch{e.innerHTML='<div class="error-message">Error loading users</div>'}}function $(e){const r=document.getElementById("userListContainer");if(!r)return;if(e.length===0){r.innerHTML='<div class="empty-state">No users found</div>';return}const o=e.map(t=>{const n=new Date(t.user_created_at).toLocaleDateString(),a=t.last_sign_in_at?new Date(t.last_sign_in_at).toLocaleDateString():"Never",d=t.email_confirmed_at?"Confirmed":"Pending",l=t.role==="super_admin"?"super-admin":t.role;return`
      <div class="user-item" data-user-id="${t.id}">
        <div class="user-info">
          <div class="user-email">${t.email}</div>
          <div class="user-meta">
            <span class="user-status ${d.toLowerCase()}">${d}</span>
            <span class="user-join-date">Joined: ${n}</span>
            <span class="user-last-login">Last login: ${a}</span>
          </div>
        </div>
        
        <div class="user-role-section">
          <span class="current-role ${l}">${t.role.replace("_"," ").toUpperCase()}</span>
          <div class="role-actions">
            ${A(t)}
          </div>
        </div>
      </div>
    `}).join("");r.innerHTML=o}function A(e){return`
    <button 
      onclick="toggleUserRole('${e.id}', '${e.email}', '${e.role}')" 
      class="role-btn ${e.role==="admin"||e.role==="super_admin"?"revoke":"grant"}"
      id="roleBtn_${e.id}"
    >
      ${e.role==="admin"||e.role==="super_admin"?"Revoke Admin":"Make Admin"}
    </button>
    
    <!-- Delete User Button (Testing Only) -->
    <button 
      onclick="deleteUserAccount('${e.id}', '${e.email}')" 
      class="role-btn revoke"
      style="background: linear-gradient(135deg, #991b1b 0%, #ef4444 100%); margin-left: 10px;"
      title="‚ö†Ô∏è Testing Only: Delete User Account"
    >
      Delete User
    </button>
  `}async function L(e,r,o){var t;try{if(!await h()){i("Only Super Admins can manage user roles","error");return}if(o==="super_admin"){i("Super Admin roles cannot be changed","error");return}const a=o==="admin"?"user":"admin",d=a==="admin"?"grant":"revoke";if(!confirm(`Are you sure you want to ${d} admin privileges ${a==="admin"?"to":"from"} ${r}?`))return;const{error:c}=await s.from("user_roles").upsert({user_id:e,role:a,granted_by:(t=await f())==null?void 0:t.id});if(c){console.error("Error updating user role:",c),i("Error updating user role","error");return}i(`Successfully ${d==="grant"?"granted":"revoked"} admin privileges ${d==="grant"?"to":"from"} ${r}`,"success"),await m()}catch(n){console.error("Error toggling user role:",n),i("Error updating user role","error")}}async function M(e,r){try{if(!await h()){i("Only Super Admins can delete user accounts","error");return}if(!confirm(`‚ö†Ô∏è WARNING: Are you absolutely sure you want to delete the account for ${r}?

This will permanently remove:
- User profile
- All associated data (foods, meals, weight entries, etc.)

This action CANNOT be undone!`)||!confirm(`‚ö†Ô∏è FINAL WARNING: This will permanently delete ${r}'s data.

Click OK to confirm.`))return;i("Deleting user data...","info");try{await Promise.all([s.from("user_profiles").delete().eq("user_id",e),s.from("foods").delete().eq("user_id",e),s.from("meals").delete().eq("user_id",e),s.from("shopping_list").delete().eq("user_id",e),s.from("weight_entries").delete().eq("user_id",e),s.from("user_roles").delete().eq("user_id",e)]),i(`User data for ${r} deleted. To remove the auth account completely, use the Supabase dashboard.`,"success"),await m()}catch(a){console.error("Error deleting user data:",a),i(`Error deleting user data: ${a.message}`,"error")}}catch(o){console.error("Error in deleteUserAccount:",o),i(`Error: ${o.message}`,"error")}}async function I(){await m(),i("User list refreshed","success")}function i(e,r="success"){let o=document.getElementById("admin-message");if(!o){o=document.createElement("div"),o.id="admin-message",o.className="message";const t=document.getElementById("admin")||document.body;t.insertBefore(o,t.firstChild)}o.textContent=e,o.className=`message ${r}`,o.style.display="block",setTimeout(()=>{o&&(o.style.display="none")},4e3)}async function v(){try{console.log("üçé Loading foods for edit dropdown...");const{data:e,error:r}=await s.from("foods").select("*").order("name");if(r){console.error("Error loading foods:",r),i("Error loading foods for editing","error");return}g=e||[];const o=document.getElementById("foodSelectDropdown");if(!o){console.warn("Food select dropdown not found");return}o.innerHTML='<option value="">Choose a food to edit...</option>',e==null||e.forEach(t=>{const n=document.createElement("option");n.value=t.id,n.textContent=t.brand?`${t.name} (${t.brand})`:t.name,o.appendChild(n)}),console.log(`üìä Loaded ${(e==null?void 0:e.length)||0} foods for editing`)}catch(e){console.error("Error loading foods for dropdown:",e),i("Error loading foods","error")}}async function B(){try{await b(),U()}catch{}}function U(){const e=document.getElementById("addFoodForm");e&&e.addEventListener("submit",N);const r=document.getElementById("foodName"),o=document.getElementById("foodBrand");r&&r.addEventListener("input",w),o&&o.addEventListener("input",w)}async function w(){const e=document.getElementById("foodName"),r=document.getElementById("foodBrand"),o=document.getElementById("duplicateWarning");if(!e||!o)return;const t=e.value.trim(),n=(r==null?void 0:r.value.trim())||"";if(!t){o.style.display="none";return}try{let a=s.from("foods").select("id, name, brand").ilike("name",t);n&&(a=a.ilike("brand",n));const{data:d,error:l}=await a;if(l){console.error("Error checking for duplicates:",l);return}(d==null?void 0:d.some(p=>p.name.toLowerCase()===t.toLowerCase()&&(p.brand||"").toLowerCase()===n.toLowerCase()))?o.style.display="block":o.style.display="none"}catch(a){console.error("Error checking for duplicates:",a),o.style.display="none"}}async function N(e){e.preventDefault();try{if(!await E()){i("Only admins can add food items","error");return}const o=e.target,t=new FormData(o),n=await f();let a="Admin User";if(n)try{const{data:c}=await s.from("user_profiles").select("name").eq("user_id",n.id).single();a=(c==null?void 0:c.name)||n.email||"Admin User"}catch{a=n.email||"Admin User"}const d={name:t.get("foodName"),brand:t.get("foodBrand")||null,carbs:parseFloat(t.get("foodCarbs"))||0,fat:parseFloat(t.get("foodFat"))||0,protein:parseFloat(t.get("foodProtein"))||0,category:t.get("foodCategory")||"OTHER",created_by:a,user_id:null};if(!d.name.trim()){i("Food name is required","error");return}console.log("üçé Adding food with data:",d);const{error:l}=await s.from("foods").insert(d);if(l){console.error("Error adding food:",l),i("Error adding food item","error");return}i(`Successfully added "${d.name}" to the food database`,"success"),typeof window.reloadFoodTracker=="function"&&(console.log("üîÑ Reloading food tracker..."),await window.reloadFoodTracker()),await v(),o.reset()}catch(r){console.error("Error adding food:",r),i("Error adding food item","error")}}async function k(){try{if(!await f()||!await E())return;const{data:o,error:t}=await s.from("meals").select("*").order("name");if(t){console.error("Error loading meals:",t);return}const n=document.getElementById("mealSelectDropdown");if(!n)return;if(n.innerHTML='<option value="">Choose a meal to edit...</option>',!o||o.length===0){n.innerHTML+='<option value="" disabled>No meals available</option>';return}o.forEach(a=>{const d=document.createElement("option");d.value=a.id,d.textContent=`${a.name} (${a.created_by||(a.user_id?"User Recipe":"No Carb Coach")})`,n.appendChild(d)})}catch(e){console.error("Error loading meals for dropdown:",e)}}async function D(e){try{const r=document.getElementById("editMealFormContainer");if(!e){r&&(r.style.display="none"),u=null;return}const{data:o,error:t}=await s.from("meals").select("*").eq("id",e).single();if(t||!o){console.error("Error fetching meal:",t),i("Error loading meal for editing","error");return}u=o,await S(o),r&&(r.style.display="block",r.scrollIntoView({behavior:"smooth"})),console.log("Meal edit form populated with:",o)}catch(r){console.error("Error selecting meal for edit:",r),i("Error loading meal for editing","error")}}async function S(e){const r=document.getElementById("editMealName"),o=document.getElementById("editMealType"),t=document.getElementById("editMealPicture"),n=document.getElementById("editCookingInstructions");r&&(r.value=e.name||""),o&&(o.value=e.meal_type||""),t&&(t.value=e.picture||""),n&&(n.innerHTML=e.cooking_instructions||"");try{const a=typeof e.ingredients=="string"?JSON.parse(e.ingredients):e.ingredients||[];ingredientState.ingredients=a.map(d=>({food_id:d.food_id,food_name:d.food_name||d.name,quantity:d.quantity,instructions:d.instructions||""})),renderIngredientsList()}catch(a){console.error("Error parsing ingredients:",a),ingredientState.ingredients=[],renderIngredientsList()}}function F(){const e=document.getElementById("editMealFormContainer");e&&(e.style.display="none"),u=null}async function T(){if(!u){i("No meal selected for deletion","error");return}if(confirm(`Are you sure you want to delete the meal "${u.name}"?`))try{const{error:r}=await s.from("meals").delete().eq("id",u.id);if(r)throw r;i("Meal deleted successfully","success"),F(),await k()}catch(r){console.error("Error deleting meal:",r),i("Error deleting meal","error")}}async function q(e){try{if(!e)return;const r=g.find(o=>o.id===e);if(!r){i("Food not found","error");return}ingredientState.currentFoodId=e,openIngredientModal("edit_food",null),console.log("Food edit modal opened with:",r)}catch(r){console.error("Error selecting food for edit:",r),i("Error loading food for editing","error")}}function R(){closeIngredientModal();const e=document.getElementById("foodSelectDropdown");e&&(e.value="")}async function H(){const r=document.getElementById("foodSelectDropdown").value;if(!r){i("No food selected for deletion","error");return}const o=g.find(n=>n.id===r);if(!o){i("Food not found","error");return}if(confirm(`Are you sure you want to delete "${o.name}"?`))try{const{error:n}=await s.from("foods").delete().eq("id",r);if(n)throw n;i("Food deleted successfully","success"),closeIngredientModal(),await v()}catch(n){console.error("Error deleting food:",n),i("Error deleting food","error")}}window.selectMealForEdit=D;window.cancelMealEdit=F;window.deleteMealFromEdit=T;window.selectFoodForEdit=q;window.cancelFoodEdit=R;window.deleteFoodFromEdit=H;window.toggleUserRole=L;window.refreshUserList=I;window.deleteUserAccount=M;export{R as cancelFoodEdit,F as cancelMealEdit,H as deleteFoodFromEdit,T as deleteMealFromEdit,M as deleteUserAccount,x as initializeAdmin,B as loadFoodManagement,k as loadMealsForEditDropdown,m as loadUserList,I as refreshUserList,q as selectFoodForEdit,D as selectMealForEdit,i as showMessage,L as toggleUserRole};
//# sourceMappingURL=admin-CG_CKB4z.js.map
