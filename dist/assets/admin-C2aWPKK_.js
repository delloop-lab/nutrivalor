import{i as p,g as v,s as c,a as y,b as w}from"./main-BEAKZ9OB.js";let g=[];async function E(){console.log("üëë Initializing admin panel..."),await L(),await m(),await p()&&await b(),console.log("‚úÖ Admin panel initialized")}async function L(){const e=document.getElementById("currentUserRole");if(e)try{const n=await v();e.textContent=n.charAt(0).toUpperCase()+n.slice(1).replace("_"," "),e.className=`role-badge ${n}`}catch(n){console.error("Error updating role display:",n),e.textContent="User",e.className="role-badge user"}}async function m(){const e=document.getElementById("userListContainer");if(e)try{e.innerHTML='<div class="loading-users">Loading users...</div>';const{data:n,error:r}=await c.from("user_management").select("*").order("user_created_at",{ascending:!1});if(r){console.error("Error loading users:",r),e.innerHTML='<div class="error-message">Error loading users</div>';return}g=n||[],_(g)}catch(n){console.error("Error loading user list:",n),e.innerHTML='<div class="error-message">Error loading users</div>'}}function _(e){const n=document.getElementById("userListContainer");if(!n)return;if(e.length===0){n.innerHTML='<div class="empty-state">No users found</div>';return}const r=e.map(o=>{const s=new Date(o.user_created_at).toLocaleDateString(),t=o.last_sign_in_at?new Date(o.last_sign_in_at).toLocaleDateString():"Never",a=o.email_confirmed_at?"Confirmed":"Pending",d=o.role==="super_admin"?"super-admin":o.role;return`
      <div class="user-item" data-user-id="${o.id}">
        <div class="user-info">
          <div class="user-email">${o.email}</div>
          <div class="user-meta">
            <span class="user-status ${a.toLowerCase()}">${a}</span>
            <span class="user-join-date">Joined: ${s}</span>
            <span class="user-last-login">Last login: ${t}</span>
          </div>
        </div>
        
        <div class="user-role-section">
          <span class="current-role ${d}">${o.role.replace("_"," ").toUpperCase()}</span>
          <div class="role-actions">
            ${$(o)}
          </div>
        </div>
      </div>
    `}).join("");n.innerHTML=r}function $(e){return`
    <button 
      onclick="toggleUserRole('${e.id}', '${e.email}', '${e.role}')" 
      class="role-btn ${e.role==="admin"||e.role==="super_admin"?"revoke":"grant"}"
      id="roleBtn_${e.id}"
    >
      ${e.role==="admin"||e.role==="super_admin"?"Revoke Admin":"Make Admin"}
    </button>
  `}async function A(e,n,r){var o;try{if(!await w()){i("Only Super Admins can manage user roles","error");return}if(r==="super_admin"){i("Super Admin roles cannot be changed","error");return}const t=r==="admin"?"user":"admin",a=t==="admin"?"grant":"revoke";if(!confirm(`Are you sure you want to ${a} admin privileges ${t==="admin"?"to":"from"} ${n}?`))return;const{error:l}=await c.from("user_roles").upsert({user_id:e,role:t,granted_by:(o=await y())==null?void 0:o.id});if(l){console.error("Error updating user role:",l),i("Error updating user role","error");return}i(`Successfully ${a==="grant"?"granted":"revoked"} admin privileges ${a==="grant"?"to":"from"} ${n}`,"success"),await m()}catch(s){console.error("Error toggling user role:",s),i("Error updating user role","error")}}async function C(){await m(),i("User list refreshed","success")}function i(e,n="success"){let r=document.getElementById("admin-message");if(!r){r=document.createElement("div"),r.id="admin-message",r.className="message";const o=document.getElementById("admin")||document.body;o.insertBefore(r,o.firstChild)}r.textContent=e,r.className=`message ${n}`,r.style.display="block",setTimeout(()=>{r&&(r.style.display="none")},4e3)}async function b(){console.log("üçé Loading food management..."),h()}function h(){const e=document.getElementById("addFoodForm");e&&e.addEventListener("submit",U);const n=document.getElementById("foodName"),r=document.getElementById("foodBrand");n&&n.addEventListener("input",f),r&&r.addEventListener("input",f)}async function f(){const e=document.getElementById("foodName"),n=document.getElementById("foodBrand"),r=document.getElementById("duplicateWarning");if(!e||!r)return;const o=e.value.trim(),s=(n==null?void 0:n.value.trim())||"";if(!o){r.style.display="none";return}try{let t=c.from("foods").select("id, name, brand").ilike("name",o);s&&(t=t.ilike("brand",s));const{data:a,error:d}=await t;if(d){console.error("Error checking for duplicates:",d);return}(a==null?void 0:a.some(u=>u.name.toLowerCase()===o.toLowerCase()&&(u.brand||"").toLowerCase()===s.toLowerCase()))?r.style.display="block":r.style.display="none"}catch(t){console.error("Error checking for duplicates:",t),r.style.display="none"}}async function U(e){e.preventDefault();try{if(!await p()){i("Only admins can add food items","error");return}const r=e.target,o=new FormData(r),s=await y();let t="Admin User";if(s)try{const{data:l}=await c.from("user_profiles").select("name").eq("user_id",s.id).single();t=(l==null?void 0:l.name)||s.email||"Admin User"}catch{t=s.email||"Admin User"}const a={name:o.get("foodName"),brand:o.get("foodBrand")||null,carbs:parseFloat(o.get("foodCarbs"))||0,fat:parseFloat(o.get("foodFat"))||0,protein:parseFloat(o.get("foodProtein"))||0,category:o.get("foodCategory")||"OTHER",created_by:t,user_id:null};if(!a.name.trim()){i("Food name is required","error");return}console.log("üçé Adding food with data:",a);const{error:d}=await c.from("foods").insert(a);if(d){console.error("Error adding food:",d),i("Error adding food item","error");return}i(`Successfully added "${a.name}" to the food database`,"success"),r.reset()}catch(n){console.error("Error adding food:",n),i("Error adding food item","error")}}window.toggleUserRole=A;window.refreshUserList=C;window.initializeAdmin=E;export{E as initializeAdmin,b as loadFoodManagement,m as loadUserList,C as refreshUserList,A as toggleUserRole};
//# sourceMappingURL=admin-C2aWPKK_.js.map
