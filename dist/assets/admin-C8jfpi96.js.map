{"version":3,"file":"admin-C8jfpi96.js","sources":["../../src/js/admin.ts"],"sourcesContent":["import { supabase, getCurrentUser } from './supabase-client';\nimport { isCurrentUserSuperAdmin, getCurrentUserRole, isCurrentUserAdmin } from './auth';\n// Note: Removed old ingredient modal imports - now using simple-edit.ts\nimport { loadAndDisplayFoods, allFoods } from './food-tracker';\n\n// Import simple edit functions\nimport { openEditFoodModal, openEditMealModal } from './simple-edit';\nimport { loadMealsFromDatabase } from './meals';\n\n// Admin Module for NutriValor\nlet currentUsers: any[] = [];\nlet currentFoods: any[] = [];\nlet mealManagementInitialized = false;\nlet currentEditingMeal: any = null;\nlet ingredients: any[] = [];\n\n// Initialize admin functionality\nexport async function initializeAdmin(): Promise<void> {\n  try {\n    // Update role display\n    await updateRoleDisplay();\n    \n    // Load user list\n    await loadUserList();\n    \n    // Load food management\n    await loadFoodManagement();\n    \n  } catch (error) {\n    console.error('‚ùå Error initializing admin panel:', error);\n    showMessage('Error initializing admin panel', 'error');\n  }\n}\n\n// Update role display\nasync function updateRoleDisplay(): Promise<void> {\n  const roleElement = document.getElementById('currentUserRole');\n  if (!roleElement) return;\n  \n  try {\n    const role = await getCurrentUserRole();\n    roleElement.textContent = role.charAt(0).toUpperCase() + role.slice(1).replace('_', ' ');\n    roleElement.className = `role-badge ${role}`;\n  } catch (error) {\n    console.error('Error updating role display:', error);\n    roleElement.textContent = 'User';\n    roleElement.className = 'role-badge user';\n  }\n}\n\n// Load and display user list\nexport async function loadUserList(): Promise<void> {\n  const container = document.getElementById('userListContainer');\n  if (!container) return;\n  \n  try {\n    container.innerHTML = '<div class=\"loading-users\">Loading users...</div>';\n    \n    const { data: users, error } = await supabase\n      .from('user_management')\n      .select('*')\n      .order('user_created_at', { ascending: false });\n    \n    if (error) {\n      container.innerHTML = '<div class=\"error-message\">Error loading users</div>';\n      return;\n    }\n    \n    currentUsers = users || [];\n    displayUserList(currentUsers);\n    \n  } catch (error) {\n    container.innerHTML = '<div class=\"error-message\">Error loading users</div>';\n  }\n}\n\n// Display user list\nfunction displayUserList(users: any[]): void {\n  const container = document.getElementById('userListContainer');\n  if (!container) return;\n  \n  if (users.length === 0) {\n    container.innerHTML = '<div class=\"empty-state\">No users found</div>';\n    return;\n  }\n  \n  const userListHTML = users.map(user => {\n    const joinDate = new Date(user.user_created_at).toLocaleDateString();\n    const lastLogin = user.last_sign_in_at \n      ? new Date(user.last_sign_in_at).toLocaleDateString() \n      : 'Never';\n    \n    const isConfirmed = user.email_confirmed_at ? 'Confirmed' : 'Pending';\n    const roleClass = user.role === 'super_admin' ? 'super-admin' : user.role;\n    \n    return `\n      <div class=\"user-item\" data-user-id=\"${user.id}\">\n        <div class=\"user-info\">\n          <div class=\"user-email\">${user.email}</div>\n          <div class=\"user-meta\">\n            <span class=\"user-status ${isConfirmed.toLowerCase()}\">${isConfirmed}</span>\n            <span class=\"user-join-date\">Joined: ${joinDate}</span>\n            <span class=\"user-last-login\">Last login: ${lastLogin}</span>\n          </div>\n        </div>\n        \n        <div class=\"user-role-section\">\n          <span class=\"current-role ${roleClass}\">${user.role.replace('_', ' ').toUpperCase()}</span>\n          <div class=\"role-actions\">\n            ${generateRoleButtons(user)}\n          </div>\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  container.innerHTML = userListHTML;\n}\n\n// Generate role action buttons based on current user's permissions\nfunction generateRoleButtons(user: any): string {\n  // Only super admins can change roles\n  return `\n    <button \n      onclick=\"toggleUserRole('${user.id}', '${user.email}', '${user.role}')\" \n      class=\"role-btn ${user.role === 'admin' || user.role === 'super_admin' ? 'revoke' : 'grant'}\"\n      id=\"roleBtn_${user.id}\"\n    >\n      ${user.role === 'admin' || user.role === 'super_admin' ? 'Revoke Admin' : 'Make Admin'}\n    </button>\n  `;\n}\n\n// Toggle user role between user and admin\nexport async function toggleUserRole(userId: string, email: string, currentRole: string): Promise<void> {\n  try {\n    // Check if current user is super admin\n    const isSuperAdmin = await isCurrentUserSuperAdmin();\n    if (!isSuperAdmin) {\n      showMessage('Only Super Admins can manage user roles', 'error');\n      return;\n    }\n    \n    // Don't allow changing super admin roles\n    if (currentRole === 'super_admin') {\n      showMessage('Super Admin roles cannot be changed', 'error');\n      return;\n    }\n    \n    const newRole = (currentRole === 'admin') ? 'user' : 'admin';\n    const action = newRole === 'admin' ? 'grant' : 'revoke';\n    \n    const confirmed = confirm(\n      `Are you sure you want to ${action} admin privileges ${newRole === 'admin' ? 'to' : 'from'} ${email}?`\n    );\n    \n    if (!confirmed) return;\n    \n    // Update role in database\n    const { error } = await supabase\n      .from('user_roles')\n      .upsert({\n        user_id: userId,\n        role: newRole,\n        granted_by: (await getCurrentUser())?.id\n      });\n    \n    if (error) {\n      console.error('Error updating user role:', error);\n      showMessage('Error updating user role', 'error');\n      return;\n    }\n    \n    showMessage(\n      `Successfully ${action === 'grant' ? 'granted' : 'revoked'} admin privileges ${action === 'grant' ? 'to' : 'from'} ${email}`, \n      'success'\n    );\n    \n    // Refresh user list\n    await loadUserList();\n    \n  } catch (error) {\n    console.error('Error toggling user role:', error);\n    showMessage('Error updating user role', 'error');\n  }\n}\n\n// Refresh user list\nexport async function refreshUserList(): Promise<void> {\n  await loadUserList();\n  showMessage('User list refreshed', 'success');\n}\n\n// Show message helper\nexport function showMessage(message: string, type: 'success' | 'error' | 'info' | 'warning' = 'success'): void {\n  // Create or update message element\n  let messageEl = document.getElementById('admin-message');\n  if (!messageEl) {\n    messageEl = document.createElement('div');\n    messageEl.id = 'admin-message';\n    messageEl.className = 'message';\n    const container = document.getElementById('admin') || document.body;\n    container.insertBefore(messageEl, container.firstChild);\n  }\n  \n  messageEl.textContent = message;\n  messageEl.className = `message ${type}`;\n  messageEl.style.display = 'block';\n  \n  // Hide after 4 seconds\n  setTimeout(() => {\n    if (messageEl) messageEl.style.display = 'none';\n  }, 4000);\n}\n\n// FOOD MANAGEMENT FUNCTIONS\n// =====================================================\n\n// Load foods for edit dropdown\nasync function loadFoodsForEditDropdown(): Promise<void> {\n  try {\n    console.log('üçé Loading foods for edit dropdown...');\n    const { data: foods, error } = await supabase\n      .from('foods')\n      .select('*')\n      .order('name');\n\n    if (error) {\n      console.error('Error loading foods:', error);\n      showMessage('Error loading foods for editing', 'error');\n      return;\n    }\n\n    // Store foods for later use\n    currentFoods = foods || [];\n\n    // Get dropdown element\n    const dropdown = document.getElementById('foodSelectDropdown') as HTMLSelectElement;\n    if (!dropdown) {\n      console.warn('Food select dropdown not found');\n      return;\n    }\n\n    // Clear existing options except the first one\n    dropdown.innerHTML = '<option value=\"\">Choose a food to edit...</option>';\n\n    // Add foods to dropdown\n    foods?.forEach(food => {\n      const option = document.createElement('option');\n      option.value = food.id;\n      option.textContent = food.brand ? \n        `${food.name} (${food.brand})` : \n        food.name;\n      dropdown.appendChild(option);\n    });\n\n    console.log(`üìä Loaded ${foods?.length || 0} foods for editing`);\n  } catch (error) {\n    console.error('Error loading foods for dropdown:', error);\n    showMessage('Error loading foods', 'error');\n  }\n}\n\n// Load and display food management section\nexport async function loadFoodManagement(): Promise<void> {\n  try {\n    // Load foods first\n    await loadAndDisplayFoods();\n    \n    // Then setup event listeners\n    setupFoodManagementEventListeners();\n    \n  } catch (error) {\n    // Continue with admin initialization even if food management fails\n  }\n}\n\n// Setup event listeners for food management\nfunction setupFoodManagementEventListeners(): void {\n  const addFoodForm = document.getElementById('addFoodForm') as HTMLFormElement;\n  if (addFoodForm) {\n    addFoodForm.addEventListener('submit', handleAddFood);\n  }\n  \n  // Add duplicate detection for food name and brand\n  const foodNameInput = document.getElementById('foodName') as HTMLInputElement;\n  const foodBrandInput = document.getElementById('foodBrand') as HTMLInputElement;\n  \n  if (foodNameInput) {\n    foodNameInput.addEventListener('input', checkForDuplicates);\n  }\n  \n  if (foodBrandInput) {\n    foodBrandInput.addEventListener('input', checkForDuplicates);\n  }\n}\n\n// Check for duplicate food items\nasync function checkForDuplicates(): Promise<void> {\n  const foodNameInput = document.getElementById('foodName') as HTMLInputElement;\n  const foodBrandInput = document.getElementById('foodBrand') as HTMLInputElement;\n  const duplicateWarning = document.getElementById('duplicateWarning');\n  \n  if (!foodNameInput || !duplicateWarning) return;\n  \n  const foodName = foodNameInput.value.trim();\n  const foodBrand = foodBrandInput?.value.trim() || '';\n  \n  // Only check if we have a food name\n  if (!foodName) {\n    duplicateWarning.style.display = 'none';\n    return;\n  }\n  \n  try {\n    // Search for existing food with same name and brand\n    let query = supabase\n      .from('foods')\n      .select('id, name, brand')\n      .ilike('name', foodName);\n    \n    // If brand is provided, include it in the search\n    if (foodBrand) {\n      query = query.ilike('brand', foodBrand);\n    }\n    \n    const { data: existingFoods, error } = await query;\n    \n    if (error) {\n      console.error('Error checking for duplicates:', error);\n      return;\n    }\n    \n    // Check for exact matches (case-insensitive)\n    const duplicateFound = existingFoods?.some(food => \n      food.name.toLowerCase() === foodName.toLowerCase() &&\n      (food.brand || '').toLowerCase() === foodBrand.toLowerCase()\n    );\n    \n    if (duplicateFound) {\n      duplicateWarning.style.display = 'block';\n    } else {\n      duplicateWarning.style.display = 'none';\n    }\n    \n  } catch (error) {\n    console.error('Error checking for duplicates:', error);\n    duplicateWarning.style.display = 'none';\n  }\n}\n\n// Handle adding new food item\nasync function handleAddFood(event: Event): Promise<void> {\n  event.preventDefault();\n  \n  try {\n    // Check if current user is admin\n    const isAdmin = await isCurrentUserAdmin();\n    if (!isAdmin) {\n      showMessage('Only admins can add food items', 'error');\n      return;\n    }\n    \n    const form = event.target as HTMLFormElement;\n    const formData = new FormData(form);\n    \n    // Get current user for attribution\n    const user = await getCurrentUser();\n    let createdBy = 'Admin User';\n    \n    if (user) {\n      try {\n        const { data: profile } = await supabase\n          .from('user_profiles')\n          .select('name')\n          .eq('user_id', user.id)\n          .single();\n        \n        createdBy = profile?.name || user.email || 'Admin User';\n      } catch (error) {\n        createdBy = user.email || 'Admin User';\n      }\n    }\n\n    // Extract form data\n    const foodData = {\n      name: formData.get('foodName') as string,\n      brand: formData.get('foodBrand') as string || null,\n      carbs: parseFloat(formData.get('foodCarbs') as string) || 0,\n      fat: parseFloat(formData.get('foodFat') as string) || 0,\n      protein: parseFloat(formData.get('foodProtein') as string) || 0,\n      category: formData.get('foodCategory') as string || 'OTHER',\n      created_by: createdBy,\n      user_id: null  // Global food - accessible to all users\n    };\n    \n    // Validate required fields\n    if (!foodData.name.trim()) {\n      showMessage('Food name is required', 'error');\n      return;\n    }\n    \n    console.log('üçé Adding food with data:', foodData);\n    \n    // Insert food into database\n    const { error } = await supabase\n      .from('foods')\n      .insert(foodData);\n    \n    if (error) {\n      console.error('Error adding food:', error);\n      showMessage('Error adding food item', 'error');\n      return;\n    }\n    \n    showMessage(`Successfully added \"${foodData.name}\" to the food database`, 'success');\n    \n    // Reload food tracker if available\n    if (typeof (window as any).reloadFoodTracker === 'function') {\n      console.log('üîÑ Reloading food tracker...');\n      await (window as any).reloadFoodTracker();\n    }\n    \n    // Reload food dropdowns\n    await loadFoodsForEditDropdown();\n    \n    // Reset form\n    form.reset();\n    \n  } catch (error) {\n    console.error('Error adding food:', error);\n    showMessage('Error adding food item', 'error');\n  }\n}\n\n// MEAL MANAGEMENT FUNCTIONS\n// =====================================================\n\n// Load and display meal management section\nexport async function loadMealManagement(): Promise<void> {\n  if (mealManagementInitialized) {\n    console.log('üçΩÔ∏è Meal management already initialized');\n    return;\n  }\n  \n  console.log('üçΩÔ∏è Loading meal management...');\n  \n  // Load foods for ingredient dropdowns\n  await loadFoodsForIngredients();\n  \n  // Load meals for edit dropdown\n  await loadMealsForEditDropdown();\n  \n  // Load foods for edit dropdown\n  await loadFoodsForEditDropdown();\n  \n  // Setup meal form event listeners\n  setupMealManagementEventListeners();\n  \n  mealManagementInitialized = true;\n  console.log('‚úÖ Meal management loaded');\n  \n  // Set up meal picture event listeners\n  setTimeout(() => {\n    if (typeof (window as any).setupMealPictureEventListeners === 'function') {\n      (window as any).setupMealPictureEventListeners();\n    }\n  }, 100);\n}\n\nasync function loadFoodsForIngredients(): Promise<void> {\n  try {\n    // Only load if not already loaded\n    if (currentFoods.length > 0) {\n      console.log(`üì¶ Foods already loaded (${currentFoods.length} items)`);\n      return;\n    }\n    \n    const { data: foods, error } = await supabase\n      .from('foods')\n      .select('id, name, category')\n      .order('name');\n    \n    if (error) {\n      console.error('Error loading foods for ingredients:', error);\n      return;\n    }\n    \n    // Remove duplicates based on name and category combination\n    const uniqueFoods = foods?.filter((food, index, self) => \n      index === self.findIndex(f => \n        f.name.toLowerCase() === food.name.toLowerCase() && \n        f.category === food.category\n      )\n    ) || [];\n    \n    currentFoods = uniqueFoods;\n    console.log(`üì¶ Loaded ${currentFoods.length} unique foods for ingredient selection`);\n    \n    // Log if duplicates were found\n    const duplicateCount = (foods?.length || 0) - uniqueFoods.length;\n    if (duplicateCount > 0) {\n      console.warn(`‚ö†Ô∏è Found and removed ${duplicateCount} duplicate food entries`);\n      \n      // Log the duplicates for debugging\n      const duplicates = foods?.filter((food, index, self) => \n        self.findIndex(f => \n          f.name.toLowerCase() === food.name.toLowerCase() && \n          f.category === food.category\n        ) !== index\n      ) || [];\n      \n      console.warn('Duplicate foods found:', duplicates.map(d => `${d.name} (${d.category})`));\n    }\n    \n  } catch (error) {\n    console.error('Error loading foods for ingredients:', error);\n  }\n}\n\nfunction setupMealManagementEventListeners(): void {\n  const mealForm = document.getElementById('addMealForm') as HTMLFormElement;\n  \n  if (mealForm) {\n    mealForm.addEventListener('submit', handleAddMeal);\n    mealForm.addEventListener('reset', handleClearMealForm);\n  }\n}\n\n// Handle add meal form submission\nexport async function handleAddMeal(event: Event): Promise<void> {\n  event.preventDefault();\n  \n  const form = event.target as HTMLFormElement;\n  const formData = new FormData(form);\n  \n  try {\n    // Get form data\n    const mealName = formData.get('mealName') as string;\n    const mealType = formData.get('mealType') as string;\n    const mealPicture = formData.get('mealPicture') as string;\n    const cookingInstructions = formData.get('cookingInstructions') as string;\n    \n    // Get current user\n    const user = await getCurrentUser();\n    if (!user) {\n      showMessage('You must be logged in to add meals', 'error');\n      return;\n    }\n    \n    if (ingredients.length === 0) {\n      showMessage('Please add at least one ingredient', 'error');\n      return;\n    }\n    \n    // Fetch nutritional data for each ingredient\n    const enrichedIngredients = await Promise.all(ingredients.map(async (ing) => {\n      try {\n        const { data: foodData, error } = await supabase\n          .from('foods')\n          .select('carbs, fat, protein')\n          .eq('id', ing.food_id)\n          .single();\n\n        if (error) {\n          console.warn(`Could not fetch nutrition data for food_id: ${ing.food_id}`);\n          return {\n            food_id: ing.food_id,\n            food_name: ing.food_name,\n            name: ing.food_name,\n            quantity: ing.quantity,\n            instructions: ing.instructions,\n            carbs: 0,\n            fat: 0,\n            protein: 0\n          };\n        }\n        \n        return {\n          food_id: ing.food_id,\n          food_name: ing.food_name,\n          name: ing.food_name,\n          quantity: ing.quantity,\n          instructions: ing.instructions,\n          carbs: foodData.carbs || 0,\n          fat: foodData.fat || 0,\n          protein: foodData.protein || 0\n        };\n      } catch (error) {\n        console.error(`Error fetching nutrition for ingredient ${ing.food_name}:`, error);\n        return {\n          food_id: ing.food_id,\n          food_name: ing.food_name,\n          name: ing.food_name,\n          quantity: ing.quantity,\n          instructions: ing.instructions,\n          carbs: 0,\n          fat: 0,\n          protein: 0\n        };\n      }\n    }));\n\n    // Calculate total nutrition\n    const totalCarbs = enrichedIngredients.reduce((sum, ing) => sum + (ing.carbs || 0), 0);\n    const totalFat = enrichedIngredients.reduce((sum, ing) => sum + (ing.fat || 0), 0);\n    const totalProtein = enrichedIngredients.reduce((sum, ing) => sum + (ing.protein || 0), 0);\n\n    // Create meal object - matching the actual database schema\n    const mealData = {\n      number: `M${Date.now()}`, // Generate a unique meal number\n      name: mealName.trim(),\n      meal_type: mealType,\n      picture: mealPicture?.trim() || null,\n      cooking_instructions: cookingInstructions?.trim() || null,\n      ingredients: JSON.stringify(enrichedIngredients),\n      total_carbs: totalCarbs,\n      total_fat: totalFat,\n      total_protein: totalProtein,\n      user_id: user.id, // Attribute to the logged-in user\n      created_by: user.email // Store the creator's email for display\n    };\n    \n    console.log('üçΩÔ∏è Creating meal:', mealData);\n    \n    // Insert meal into database\n    const { data, error } = await supabase\n      .from('meals')\n      .insert([mealData])\n      .select();\n    \n    if (error) {\n      console.error('Error creating meal:', error);\n      showMessage('Error creating meal: ' + error.message, 'error');\n      return;\n    }\n    \n    console.log('‚úÖ Meal created successfully:', data);\n    showMessage(`Successfully created meal: ${mealName}`, 'success');\n    \n    // Reload meals in the main meals section\n    if (typeof (window as any).reloadMeals === 'function') {\n      console.log('üîÑ Reloading meals display...');\n      await (window as any).reloadMeals();\n    }\n    \n    // Clear the form\n    form.reset();\n    handleClearMealForm();\n    \n  } catch (error) {\n    console.error('Error creating meal:', error);\n    showMessage('Error creating meal', 'error');\n  }\n}\n\n// Handle clear meal form\nfunction handleClearMealForm(): void {\n  ingredients = [];\n  // renderIngredientsList(); // Commented out - using simple-edit.ts system\n  \n  // Clear rich text editor\n  const editor = document.getElementById('cookingInstructions') as HTMLDivElement;\n  if (editor) {\n    editor.innerHTML = '';\n  }\n  \n  // Clear hidden input\n  const hiddenInput = document.getElementById('cookingInstructionsHidden') as HTMLInputElement;\n  if (hiddenInput) {\n    hiddenInput.value = '';\n  }\n  \n  // Clear picture preview\n  const preview = document.getElementById('mealPicturePreview') as HTMLImageElement;\n  const placeholder = document.getElementById('mealPicturePlaceholder') as HTMLElement;\n  const removeBtn = document.getElementById('removeMealPictureBtn') as HTMLButtonElement;\n  \n  if (preview && placeholder) {\n    preview.style.display = 'none';\n    placeholder.style.display = 'block';\n  }\n  if (removeBtn) {\n    removeBtn.style.display = 'none';\n  }\n}\n\n// DATABASE CLEANUP FUNCTIONS\n// =====================================================\n\n// Remove duplicate foods from database\n// Meal Editing Functions\n\nexport async function loadMealsForEditDropdown(): Promise<void> {\n  try {\n    const user = await getCurrentUser();\n    if (!user) return;\n\n    const isAdmin = await isCurrentUserAdmin();\n    if (!isAdmin) return;\n\n    // Load all meals (admin can edit all meals)\n    const { data: meals, error } = await supabase\n      .from('meals')\n      .select('*')\n      .order('name');\n\n    if (error) {\n      console.error('Error loading meals:', error);\n      return;\n    }\n\n    const dropdown = document.getElementById('mealSelectDropdown') as HTMLSelectElement;\n    if (!dropdown) return;\n\n    // Clear existing options except the first one\n    dropdown.innerHTML = '<option value=\"\">Choose a meal to edit...</option>';\n\n    if (!meals || meals.length === 0) {\n      dropdown.innerHTML += '<option value=\"\" disabled>No meals available</option>';\n      return;\n    }\n\n    // Add meals to dropdown\n    meals.forEach(meal => {\n      const option = document.createElement('option');\n      option.value = meal.id;\n      option.textContent = `${meal.name} (${meal.created_by || (meal.user_id ? 'User Recipe' : 'No Carb Coach')})`;\n      dropdown.appendChild(option);\n    });\n\n  } catch (error) {\n    console.error('Error loading meals for dropdown:', error);\n  }\n}\n\nexport async function selectMealForEdit(mealId: string): Promise<void> {\n  try {\n    // If no meal selected, hide the form\n    const formContainer = document.getElementById('editMealFormContainer');\n    if (!mealId) {\n      if (formContainer) {\n        formContainer.style.display = 'none';\n      }\n      currentEditingMeal = null;\n      return;\n    }\n\n    // Fetch meal details\n    const { data: meal, error } = await supabase\n      .from('meals')\n      .select('*')\n      .eq('id', mealId)\n      .single();\n\n    if (error || !meal) {\n      console.error('Error fetching meal:', error);\n      showMessage('Error loading meal for editing', 'error');\n      return;\n    }\n\n    currentEditingMeal = meal;\n    await populateEditForm(meal);\n\n    // Show edit form\n    if (formContainer) {\n      formContainer.style.display = 'block';\n      formContainer.scrollIntoView({ behavior: 'smooth' });\n    }\n\n    console.log('Meal edit form populated with:', meal);\n  } catch (error) {\n    console.error('Error selecting meal for edit:', error);\n    showMessage('Error loading meal for editing', 'error');\n  }\n}\n\n// Populate edit form with meal data\nasync function populateEditForm(meal: any): Promise<void> {\n  const nameInput = document.getElementById('editMealName') as HTMLInputElement;\n  const typeSelect = document.getElementById('editMealType') as HTMLSelectElement;\n  const pictureInput = document.getElementById('editMealPicture') as HTMLInputElement;\n  const instructionsInput = document.getElementById('editCookingInstructions') as HTMLDivElement;\n  \n  if (nameInput) nameInput.value = meal.name || '';\n  if (typeSelect) typeSelect.value = meal.meal_type || '';\n  if (pictureInput) pictureInput.value = meal.picture || '';\n  if (instructionsInput) instructionsInput.innerHTML = meal.cooking_instructions || '';\n  \n  // Parse and set ingredients\n  try {\n    const parsedIngredients = typeof meal.ingredients === 'string' \n      ? JSON.parse(meal.ingredients) \n      : meal.ingredients || [];\n    \n    ingredientState.ingredients = parsedIngredients.map((ing: any) => ({\n      food_id: ing.food_id,\n      food_name: ing.food_name || ing.name,\n      quantity: ing.quantity,\n      instructions: ing.instructions || ''\n    }));\n    \n    // Render ingredients list\n    renderIngredientsList();\n  } catch (error) {\n    console.error('Error parsing ingredients:', error);\n    ingredientState.ingredients = [];\n    renderIngredientsList();\n  }\n}\n\n// Cancel meal edit\nexport function cancelMealEdit(): void {\n  const formContainer = document.getElementById('editMealFormContainer');\n  if (formContainer) {\n    formContainer.style.display = 'none';\n  }\n  currentEditingMeal = null;\n}\n\n// Delete meal from edit\nexport async function deleteMealFromEdit(): Promise<void> {\n  if (!currentEditingMeal) {\n    showMessage('No meal selected for deletion', 'error');\n    return;\n  }\n\n  const confirmed = confirm(`Are you sure you want to delete the meal \"${currentEditingMeal.name}\"?`);\n  if (!confirmed) return;\n\n  try {\n    const { error } = await supabase\n      .from('meals')\n      .delete()\n      .eq('id', currentEditingMeal.id);\n\n    if (error) throw error;\n\n    showMessage('Meal deleted successfully', 'success');\n    cancelMealEdit();\n    await loadMealsForEditDropdown();\n  } catch (error) {\n    console.error('Error deleting meal:', error);\n    showMessage('Error deleting meal', 'error');\n  }\n}\n\n// Select food for edit\nexport async function selectFoodForEdit(foodId: string): Promise<void> {\n  try {\n    // If no food selected, do nothing\n    if (!foodId) {\n      return;\n    }\n\n    // Find the food in currentFoods\n    const food = currentFoods.find(f => f.id === foodId);\n    if (!food) {\n      showMessage('Food not found', 'error');\n      return;\n    }\n\n    // Set the selected food ID in the ingredient modal state\n    ingredientState.currentFoodId = foodId;\n\n    // Open the ingredient modal in edit mode\n    openIngredientModal('edit_food', null);\n\n    console.log('Food edit modal opened with:', food);\n  } catch (error) {\n    console.error('Error selecting food for edit:', error);\n    showMessage('Error loading food for editing', 'error');\n  }\n}\n\n// Cancel food edit\nexport function cancelFoodEdit(): void {\n  closeIngredientModal();\n  const dropdown = document.getElementById('foodSelectDropdown') as HTMLSelectElement;\n  if (dropdown) {\n    dropdown.value = '';\n  }\n}\n\n// Delete food from edit\nexport async function deleteFoodFromEdit(): Promise<void> {\n  const dropdown = document.getElementById('foodSelectDropdown') as HTMLSelectElement;\n  const foodId = dropdown.value;\n\n  if (!foodId) {\n    showMessage('No food selected for deletion', 'error');\n    return;\n  }\n\n  const food = currentFoods.find(f => f.id === foodId);\n  if (!food) {\n    showMessage('Food not found', 'error');\n    return;\n  }\n\n  const confirmed = confirm(`Are you sure you want to delete \"${food.name}\"?`);\n  if (!confirmed) return;\n\n  try {\n    const { error } = await supabase\n      .from('foods')\n      .delete()\n      .eq('id', foodId);\n\n    if (error) throw error;\n\n    showMessage('Food deleted successfully', 'success');\n    closeIngredientModal();\n    await loadFoodsForEditDropdown();\n  } catch (error) {\n    console.error('Error deleting food:', error);\n    showMessage('Error deleting food', 'error');\n  }\n}\n\n// Add to window object\ndeclare global {\n  interface Window {\n    openIngredientModal: (operation: ModalOperation, idx?: number | null, foodId?: string | null) => void;\n    closeIngredientModal: () => void;\n    removeIngredient: (idx: number) => void;\n    selectMealForEdit: (mealId: string) => Promise<void>;\n    addIngredientRow: () => void;\n    removeIngredientRow: (button: HTMLElement) => void;\n    cancelMealEdit: () => void;\n    deleteMealFromEdit: () => Promise<void>;\n    selectFoodForEdit: (foodId: string) => Promise<void>;\n    cancelFoodEdit: () => void;\n    deleteFoodFromEdit: () => Promise<void>;\n    toggleUserRole: (userId: string, email: string, currentRole: string) => Promise<void>;\n    refreshUserList: () => Promise<void>;\n  }\n}\n\n// Note: Removed old ingredient modal functions - using simple-edit.ts system\n// window.openIngredientModal = openIngredientModal;\n// window.closeIngredientModal = closeIngredientModal;\n// window.removeIngredient = removeIngredient;\nwindow.selectMealForEdit = selectMealForEdit;\n// window.removeIngredientRow = removeIngredientRow;\nwindow.cancelMealEdit = cancelMealEdit;\nwindow.deleteMealFromEdit = deleteMealFromEdit;\nwindow.selectFoodForEdit = selectFoodForEdit;\nwindow.cancelFoodEdit = cancelFoodEdit;\nwindow.deleteFoodFromEdit = deleteFoodFromEdit;\nwindow.toggleUserRole = toggleUserRole;\nwindow.refreshUserList = refreshUserList;\n\n// ... existing code ...\n\nexport function setupAdminSection() {\n    const adminSection = document.getElementById('admin');\n    if (!adminSection) return;\n\n    adminSection.innerHTML = `\n        <div class=\"section-header\">\n            <h2>Admin Panel</h2>\n            <div style=\"text-align:center; margin-top: 0.25rem;\">\n                <span style=\"color: #888; font-size: 1rem; font-weight: 500;\">V0.8.001</span>\n            </div>\n        </div>\n        <hr>\n        <div class=\"admin-grid\">\n            <!-- Create Food Column -->\n            <div class=\"admin-column\">\n                <h3>Create Food</h3>\n                <form id=\"createFoodForm\" class=\"admin-form\">\n                    <div class=\"form-group\">\n                        <label for=\"foodName\">Food Name *</label>\n                        <input type=\"text\" id=\"foodName\" required placeholder=\"e.g., Chicken Breast\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"foodBrand\">Brand</label>\n                        <input type=\"text\" id=\"foodBrand\" placeholder=\"e.g., Woolworths\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"foodCategory\">Category *</label>\n                        <select id=\"foodCategory\" required>\n                            <option value=\"\">Select a category...</option>\n                            <option value=\"VEGETABLES\">Vegetables</option>\n                            <option value=\"SALAD\">Salad</option>\n                            <option value=\"DAIRY\">Dairy</option>\n                            <option value=\"PROTEIN\">Protein</option>\n                            <option value=\"CONDIMENTS\">Condiments</option>\n                            <option value=\"DRINKS\">Drinks</option>\n                            <option value=\"OTHER\">Other</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"foodCarbs\">Carbs (g) *</label>\n                        <input type=\"number\" id=\"foodCarbs\" required min=\"0\" step=\"0.1\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"foodFat\">Fat (g) *</label>\n                        <input type=\"number\" id=\"foodFat\" required min=\"0\" step=\"0.1\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"foodProtein\">Protein (g) *</label>\n                        <input type=\"number\" id=\"foodProtein\" required min=\"0\" step=\"0.1\">\n                    </div>\n                    <button type=\"submit\" class=\"primary-btn\">Create Food</button>\n                </form>\n            </div>\n\n            <!-- Create Meal Column -->\n            <div class=\"admin-column\">\n                <h3>Create Meal</h3>\n                <form id=\"createMealForm\" class=\"admin-form\">\n                    <div class=\"form-group\">\n                        <label for=\"mealName\">Meal Name *</label>\n                        <input type=\"text\" id=\"mealName\" required placeholder=\"e.g., Bacon and Eggs Breakfast\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"mealType\">Meal Type *</label>\n                        <select id=\"mealType\" required>\n                            <option value=\"\">Select Type</option>\n                            <option value=\"BREAKFAST\">Breakfast</option>\n                            <option value=\"LUNCH\">Lunch</option>\n                            <option value=\"DINNER\">Dinner</option>\n                            <option value=\"SNACK\">Snack</option>\n                            <option value=\"DESSERT\">Dessert</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"mealInstructions\">Cooking Instructions</label>\n                        <textarea id=\"mealInstructions\" rows=\"3\" placeholder=\"Optional cooking or preparation instructions\"></textarea>\n                    </div>\n                    <button type=\"submit\" class=\"primary-btn\">Create Meal</button>\n                </form>\n            </div>\n\n            <!-- Edit Column -->\n            <div class=\"admin-column\">\n                <h3>Edit Items</h3>\n                <div class=\"edit-buttons\">\n                    <button onclick=\"openEditFoodModal()\" class=\"secondary-btn\">Edit Food</button>\n                    <button onclick=\"openEditMealModal()\" class=\"secondary-btn\">Edit Meal</button>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // Setup event listeners\n    setupAdminEventListeners();\n}\n\nfunction setupAdminEventListeners() {\n    // Setup form submission handlers\n    const createFoodForm = document.getElementById('createFoodForm') as HTMLFormElement;\n    const createMealForm = document.getElementById('createMealForm') as HTMLFormElement;\n\n    if (createFoodForm) {\n        createFoodForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const foodData = {\n                name: (document.getElementById('foodName') as HTMLInputElement).value,\n                brand: (document.getElementById('foodBrand') as HTMLInputElement).value,\n                category: (document.getElementById('foodCategory') as HTMLSelectElement).value,\n                carbs: parseFloat((document.getElementById('foodCarbs') as HTMLInputElement).value),\n                fat: parseFloat((document.getElementById('foodFat') as HTMLInputElement).value),\n                protein: parseFloat((document.getElementById('foodProtein') as HTMLInputElement).value)\n            };\n            await createFood(foodData);\n            createFoodForm.reset();\n        });\n    }\n\n    if (createMealForm) {\n        createMealForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const mealData = {\n                name: (document.getElementById('mealName') as HTMLInputElement).value,\n                meal_type: (document.getElementById('mealType') as HTMLSelectElement).value,\n                cooking_instructions: (document.getElementById('mealInstructions') as HTMLTextAreaElement).value,\n                ingredients: []\n            };\n            await createMeal(mealData);\n            createMealForm.reset();\n        });\n    }\n}\n\nasync function createFood(foodData: any) {\n    try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n            showMessage('Please log in to create food items', 'error');\n            return;\n        }\n\n        const { data, error } = await supabase\n            .from('foods')\n            .insert([{\n                ...foodData,\n                user_id: user.id,\n                created_by: user.email\n            }]);\n\n        if (error) {\n            showMessage('Error creating food: ' + error.message, 'error');\n            return;\n        }\n\n        showMessage('Food created successfully!', 'success');\n        await loadAndDisplayFoods(); // Refresh the food list\n    } catch (error) {\n        console.error('Error in createFood:', error);\n        showMessage('Error creating food', 'error');\n    }\n}\n\nasync function createMeal(mealData: any) {\n    try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n            showMessage('Please log in to create meals', 'error');\n            return;\n        }\n\n        const { data, error } = await supabase\n            .from('meals')\n            .insert([{\n                ...mealData,\n                user_id: user.id,\n                created_by: user.email,\n                ingredients: JSON.stringify(mealData.ingredients)\n            }]);\n\n        if (error) {\n            showMessage('Error creating meal: ' + error.message, 'error');\n            return;\n        }\n\n        showMessage('Meal created successfully!', 'success');\n        await loadMealsFromDatabase(); // Refresh the meals list\n    } catch (error) {\n        console.error('Error in createMeal:', error);\n        showMessage('Error creating meal', 'error');\n    }\n}\n\n// window.addIngredientRow = addIngredientRow;\n\n "],"names":["currentUsers","currentFoods","currentEditingMeal","initializeAdmin","updateRoleDisplay","loadUserList","loadFoodManagement","error","showMessage","roleElement","role","getCurrentUserRole","container","users","supabase","displayUserList","userListHTML","user","joinDate","lastLogin","isConfirmed","roleClass","generateRoleButtons","toggleUserRole","userId","email","currentRole","isCurrentUserSuperAdmin","newRole","action","_a","getCurrentUser","refreshUserList","message","type","messageEl","loadFoodsForEditDropdown","foods","dropdown","food","option","loadAndDisplayFoods","setupFoodManagementEventListeners","addFoodForm","handleAddFood","foodNameInput","foodBrandInput","checkForDuplicates","duplicateWarning","foodName","foodBrand","query","existingFoods","event","isCurrentUserAdmin","form","formData","createdBy","profile","foodData","loadMealsForEditDropdown","meals","meal","selectMealForEdit","mealId","formContainer","populateEditForm","nameInput","typeSelect","pictureInput","instructionsInput","parsedIngredients","ing","cancelMealEdit","deleteMealFromEdit","selectFoodForEdit","foodId","f","cancelFoodEdit","deleteFoodFromEdit"],"mappings":"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"}