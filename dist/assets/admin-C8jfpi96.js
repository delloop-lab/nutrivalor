import{g as F,s,l as _,i as E,a as m,b as C}from"./main-9IzfS2kG.js";let y=[],f=[],u=null;async function x(){try{await L(),await g(),await B()}catch(e){console.error("‚ùå Error initializing admin panel:",e),a("Error initializing admin panel","error")}}async function L(){const e=document.getElementById("currentUserRole");if(e)try{const o=await F();e.textContent=o.charAt(0).toUpperCase()+o.slice(1).replace("_"," "),e.className=`role-badge ${o}`}catch(o){console.error("Error updating role display:",o),e.textContent="User",e.className="role-badge user"}}async function g(){const e=document.getElementById("userListContainer");if(e)try{e.innerHTML='<div class="loading-users">Loading users...</div>';const{data:o,error:r}=await s.from("user_management").select("*").order("user_created_at",{ascending:!1});if(r){e.innerHTML='<div class="error-message">Error loading users</div>';return}y=o||[],I(y)}catch{e.innerHTML='<div class="error-message">Error loading users</div>'}}function I(e){const o=document.getElementById("userListContainer");if(!o)return;if(e.length===0){o.innerHTML='<div class="empty-state">No users found</div>';return}const r=e.map(n=>{const t=new Date(n.user_created_at).toLocaleDateString(),d=n.last_sign_in_at?new Date(n.last_sign_in_at).toLocaleDateString():"Never",i=n.email_confirmed_at?"Confirmed":"Pending",l=n.role==="super_admin"?"super-admin":n.role;return`
      <div class="user-item" data-user-id="${n.id}">
        <div class="user-info">
          <div class="user-email">${n.email}</div>
          <div class="user-meta">
            <span class="user-status ${i.toLowerCase()}">${i}</span>
            <span class="user-join-date">Joined: ${t}</span>
            <span class="user-last-login">Last login: ${d}</span>
          </div>
        </div>
        
        <div class="user-role-section">
          <span class="current-role ${l}">${n.role.replace("_"," ").toUpperCase()}</span>
          <div class="role-actions">
            ${M(n)}
          </div>
        </div>
      </div>
    `}).join("");o.innerHTML=r}function M(e){return`
    <button 
      onclick="toggleUserRole('${e.id}', '${e.email}', '${e.role}')" 
      class="role-btn ${e.role==="admin"||e.role==="super_admin"?"revoke":"grant"}"
      id="roleBtn_${e.id}"
    >
      ${e.role==="admin"||e.role==="super_admin"?"Revoke Admin":"Make Admin"}
    </button>
  `}async function $(e,o,r){var n;try{if(!await C()){a("Only Super Admins can manage user roles","error");return}if(r==="super_admin"){a("Super Admin roles cannot be changed","error");return}const d=r==="admin"?"user":"admin",i=d==="admin"?"grant":"revoke";if(!confirm(`Are you sure you want to ${i} admin privileges ${d==="admin"?"to":"from"} ${o}?`))return;const{error:c}=await s.from("user_roles").upsert({user_id:e,role:d,granted_by:(n=await m())==null?void 0:n.id});if(c){console.error("Error updating user role:",c),a("Error updating user role","error");return}a(`Successfully ${i==="grant"?"granted":"revoked"} admin privileges ${i==="grant"?"to":"from"} ${o}`,"success"),await g()}catch(t){console.error("Error toggling user role:",t),a("Error updating user role","error")}}async function b(){await g(),a("User list refreshed","success")}function a(e,o="success"){let r=document.getElementById("admin-message");if(!r){r=document.createElement("div"),r.id="admin-message",r.className="message";const n=document.getElementById("admin")||document.body;n.insertBefore(r,n.firstChild)}r.textContent=e,r.className=`message ${o}`,r.style.display="block",setTimeout(()=>{r&&(r.style.display="none")},4e3)}async function h(){try{console.log("üçé Loading foods for edit dropdown...");const{data:e,error:o}=await s.from("foods").select("*").order("name");if(o){console.error("Error loading foods:",o),a("Error loading foods for editing","error");return}f=e||[];const r=document.getElementById("foodSelectDropdown");if(!r){console.warn("Food select dropdown not found");return}r.innerHTML='<option value="">Choose a food to edit...</option>',e==null||e.forEach(n=>{const t=document.createElement("option");t.value=n.id,t.textContent=n.brand?`${n.name} (${n.brand})`:n.name,r.appendChild(t)}),console.log(`üìä Loaded ${(e==null?void 0:e.length)||0} foods for editing`)}catch(e){console.error("Error loading foods for dropdown:",e),a("Error loading foods","error")}}async function B(){try{await _(),A()}catch{}}function A(){const e=document.getElementById("addFoodForm");e&&e.addEventListener("submit",U);const o=document.getElementById("foodName"),r=document.getElementById("foodBrand");o&&o.addEventListener("input",w),r&&r.addEventListener("input",w)}async function w(){const e=document.getElementById("foodName"),o=document.getElementById("foodBrand"),r=document.getElementById("duplicateWarning");if(!e||!r)return;const n=e.value.trim(),t=(o==null?void 0:o.value.trim())||"";if(!n){r.style.display="none";return}try{let d=s.from("foods").select("id, name, brand").ilike("name",n);t&&(d=d.ilike("brand",t));const{data:i,error:l}=await d;if(l){console.error("Error checking for duplicates:",l);return}(i==null?void 0:i.some(p=>p.name.toLowerCase()===n.toLowerCase()&&(p.brand||"").toLowerCase()===t.toLowerCase()))?r.style.display="block":r.style.display="none"}catch(d){console.error("Error checking for duplicates:",d),r.style.display="none"}}async function U(e){e.preventDefault();try{if(!await E()){a("Only admins can add food items","error");return}const r=e.target,n=new FormData(r),t=await m();let d="Admin User";if(t)try{const{data:c}=await s.from("user_profiles").select("name").eq("user_id",t.id).single();d=(c==null?void 0:c.name)||t.email||"Admin User"}catch{d=t.email||"Admin User"}const i={name:n.get("foodName"),brand:n.get("foodBrand")||null,carbs:parseFloat(n.get("foodCarbs"))||0,fat:parseFloat(n.get("foodFat"))||0,protein:parseFloat(n.get("foodProtein"))||0,category:n.get("foodCategory")||"OTHER",created_by:d,user_id:null};if(!i.name.trim()){a("Food name is required","error");return}console.log("üçé Adding food with data:",i);const{error:l}=await s.from("foods").insert(i);if(l){console.error("Error adding food:",l),a("Error adding food item","error");return}a(`Successfully added "${i.name}" to the food database`,"success"),typeof window.reloadFoodTracker=="function"&&(console.log("üîÑ Reloading food tracker..."),await window.reloadFoodTracker()),await h(),r.reset()}catch(o){console.error("Error adding food:",o),a("Error adding food item","error")}}async function k(){try{if(!await m()||!await E())return;const{data:r,error:n}=await s.from("meals").select("*").order("name");if(n){console.error("Error loading meals:",n);return}const t=document.getElementById("mealSelectDropdown");if(!t)return;if(t.innerHTML='<option value="">Choose a meal to edit...</option>',!r||r.length===0){t.innerHTML+='<option value="" disabled>No meals available</option>';return}r.forEach(d=>{const i=document.createElement("option");i.value=d.id,i.textContent=`${d.name} (${d.created_by||(d.user_id?"User Recipe":"No Carb Coach")})`,t.appendChild(i)})}catch(e){console.error("Error loading meals for dropdown:",e)}}async function D(e){try{const o=document.getElementById("editMealFormContainer");if(!e){o&&(o.style.display="none"),u=null;return}const{data:r,error:n}=await s.from("meals").select("*").eq("id",e).single();if(n||!r){console.error("Error fetching meal:",n),a("Error loading meal for editing","error");return}u=r,await N(r),o&&(o.style.display="block",o.scrollIntoView({behavior:"smooth"})),console.log("Meal edit form populated with:",r)}catch(o){console.error("Error selecting meal for edit:",o),a("Error loading meal for editing","error")}}async function N(e){const o=document.getElementById("editMealName"),r=document.getElementById("editMealType"),n=document.getElementById("editMealPicture"),t=document.getElementById("editCookingInstructions");o&&(o.value=e.name||""),r&&(r.value=e.meal_type||""),n&&(n.value=e.picture||""),t&&(t.innerHTML=e.cooking_instructions||"");try{const d=typeof e.ingredients=="string"?JSON.parse(e.ingredients):e.ingredients||[];ingredientState.ingredients=d.map(i=>({food_id:i.food_id,food_name:i.food_name||i.name,quantity:i.quantity,instructions:i.instructions||""})),renderIngredientsList()}catch(d){console.error("Error parsing ingredients:",d),ingredientState.ingredients=[],renderIngredientsList()}}function v(){const e=document.getElementById("editMealFormContainer");e&&(e.style.display="none"),u=null}async function S(){if(!u){a("No meal selected for deletion","error");return}if(confirm(`Are you sure you want to delete the meal "${u.name}"?`))try{const{error:o}=await s.from("meals").delete().eq("id",u.id);if(o)throw o;a("Meal deleted successfully","success"),v(),await k()}catch(o){console.error("Error deleting meal:",o),a("Error deleting meal","error")}}async function T(e){try{if(!e)return;const o=f.find(r=>r.id===e);if(!o){a("Food not found","error");return}ingredientState.currentFoodId=e,openIngredientModal("edit_food",null),console.log("Food edit modal opened with:",o)}catch(o){console.error("Error selecting food for edit:",o),a("Error loading food for editing","error")}}function H(){closeIngredientModal();const e=document.getElementById("foodSelectDropdown");e&&(e.value="")}async function R(){const o=document.getElementById("foodSelectDropdown").value;if(!o){a("No food selected for deletion","error");return}const r=f.find(t=>t.id===o);if(!r){a("Food not found","error");return}if(confirm(`Are you sure you want to delete "${r.name}"?`))try{const{error:t}=await s.from("foods").delete().eq("id",o);if(t)throw t;a("Food deleted successfully","success"),closeIngredientModal(),await h()}catch(t){console.error("Error deleting food:",t),a("Error deleting food","error")}}window.selectMealForEdit=D;window.cancelMealEdit=v;window.deleteMealFromEdit=S;window.selectFoodForEdit=T;window.cancelFoodEdit=H;window.deleteFoodFromEdit=R;window.toggleUserRole=$;window.refreshUserList=b;export{H as cancelFoodEdit,v as cancelMealEdit,R as deleteFoodFromEdit,S as deleteMealFromEdit,x as initializeAdmin,B as loadFoodManagement,k as loadMealsForEditDropdown,g as loadUserList,b as refreshUserList,T as selectFoodForEdit,D as selectMealForEdit,a as showMessage,$ as toggleUserRole};
//# sourceMappingURL=admin-C8jfpi96.js.map
