const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/main-M_9bQhuz.js","assets/main-aNJlu02b.css"])))=>i.map(i=>d[i]);
import{a as h,s as i,i as m,g,c as l,r as L,_ as S}from"./main-M_9bQhuz.js";let E=!1;async function B(){try{console.log("üëë Initializing Admin Panel..."),await C(),E||(I(),E=!0),await M()}catch(e){console.error("‚ùå Error initializing admin panel:",e),s("Error initializing admin panel","error")}}async function M(){try{if(console.log("üë• Initializing user management..."),!await m()){console.log("‚ùå User is not super admin, hiding user management");const t=document.querySelector(".admin-card");t&&(t.style.display="none");return}await f(),await v()}catch(e){console.error("‚ùå Error initializing user management:",e)}}async function f(){try{if(console.log("üîÑ Refreshing user list..."),!await m()){console.log("‚ùå User is not super admin, cannot refresh user list");return}const{data:t,error:n}=await i.from("user_roles").select("user_id").limit(1);if(n&&n.code==="PGRST200"){const a=document.getElementById("userListContainer");a&&(a.innerHTML=`
          <div class="setup-message">
            <h3>üõ†Ô∏è Database Setup Required</h3>
            <p>The user management system needs to be set up in your database.</p>
            <div class="setup-steps">
              <h4>Steps to complete setup:</h4>
              <ol>
                <li>Go to your Supabase Dashboard</li>
                <li>Navigate to the SQL Editor</li>
                <li>Run the <code>create-user-roles-table.sql</code> script</li>
                <li>Run the <code>setup-super-admin.sql</code> script</li>
                <li>Refresh this page</li>
              </ol>
            </div>
            <button onclick="refreshUserList()" class="btn btn-primary">Retry After Setup</button>
          </div>
        `);return}const{data:r,error:o}=await i.rpc("get_admin_user_list");if(o)throw o;await D(r||[])}catch(e){console.error("‚ùå Error refreshing user list:",e),s("Error loading users","error")}}async function D(e){const t=document.getElementById("userListContainer");if(!t)return;if(e.length===0){t.innerHTML='<div class="no-users">No users found</div>';return}const n=e.map(r=>{const o=r.role||"user",a=r.email&&r.email.length>0,c=r.created_at?new Date(r.created_at).toLocaleDateString():"Unknown",p=r.last_sign_in_at?new Date(r.last_sign_in_at).toLocaleDateString():"Never";return`
      <div class="user-item">
        <div class="user-info">
          <div class="user-email">${r.email||"Unknown"}</div>
          <div class="user-meta">
            <span class="user-status ${a?"confirmed":"pending"}">
              ${a?"Confirmed":"Pending"}
            </span>
            <span class="user-join-date">Joined: ${c}</span>
            <span class="user-last-login">Last login: ${p}</span>
          </div>
        </div>
        <div class="user-role-section">
          <span class="current-role ${o}">${o.replace("_","-")}</span>
          ${o==="user"?`<button class="role-btn grant" onclick="grantAdminRole('${r.user_id}')">Grant Admin</button>`:`<button class="role-btn revoke" onclick="revokeAdminRole('${r.user_id}')">Revoke Admin</button>`}
        </div>
      </div>
    `}).join("");t.innerHTML=n}async function U(e){try{if(console.log("üëë Granting admin role to user:",e),!await m()){s("Only super admins can grant admin roles","error");return}const n=await g();if(!n){s("You must be logged in to perform this action","error");return}const{error:r}=await i.from("user_roles").upsert({user_id:e,role:"admin",granted_by:n.id,granted_at:new Date().toISOString()});if(r)throw r;s("Admin role granted successfully","success"),await f()}catch(t){console.error("‚ùå Error granting admin role:",t),s("Error granting admin role","error")}}async function k(e){try{if(console.log("üëë Revoking admin role from user:",e),!await m()){s("Only super admins can revoke admin roles","error");return}const n=await g();if(!n){s("You must be logged in to perform this action","error");return}const{error:r}=await i.from("user_roles").upsert({user_id:e,role:"user",granted_by:n.id,granted_at:new Date().toISOString()});if(r)throw r;s("Admin role revoked successfully","success"),await f()}catch(t){console.error("‚ùå Error revoking admin role:",t),s("Error revoking admin role","error")}}async function v(){try{console.log("üîÑ Updating current user role display...");let e="user";try{const{getCurrentUserRole:n}=await S(async()=>{const{getCurrentUserRole:r}=await import("./main-M_9bQhuz.js").then(o=>o.b);return{getCurrentUserRole:r}},__vite__mapDeps([0,1]));e=await n(),console.log("‚úÖ Got user role:",e)}catch(n){console.warn("‚ö†Ô∏è Could not import getCurrentUserRole, trying direct approach:",n);try{const r=await g();if(r){const{data:o,error:a}=await i.from("user_roles").select("role").eq("user_id",r.id).single();!a&&o?(e=o.role,console.log("‚úÖ Got user role via direct query:",e)):console.log("‚ÑπÔ∏è No role record found, using default: user")}}catch(r){console.error("‚ùå Direct role query failed:",r)}}const t=document.getElementById("currentUserRole");if(t){const n=e.replace("_"," ").toUpperCase();t.textContent=n,t.className=`role-badge ${e}`,console.log("‚úÖ Updated role display to:",n)}else console.error("‚ùå Role display element not found")}catch(e){console.error("‚ùå Error updating role display:",e);const t=document.getElementById("currentUserRole");t&&(t.textContent="ERROR",t.className="role-badge error")}}async function C(){if(!(h.length>0))try{const{data:e,error:t}=await i.from("foods").select("*").order("name");if(t)throw t;h.push(...e||[]),console.log(`üì¶ Loaded ${h.length} foods for admin use.`)}catch(e){console.error("Error loading foods for ingredients:",e)}}function I(){const e=document.getElementById("addMealForm");e&&(e.addEventListener("submit",$),e.addEventListener("reset",T))}async function $(e){e.preventDefault();const t=e.target,n=new FormData(t);try{const r=n.get("mealName"),o=n.get("mealType"),a=n.get("cookingInstructions"),c=await g();if(!c)throw new Error("You must be logged in to create a meal.");if(l.length===0){s("Please add at least one ingredient.","error");return}const p=l.reduce((d,u)=>d+(u.carbs||0),0),R=l.reduce((d,u)=>d+(u.fat||0),0),A=l.reduce((d,u)=>d+(u.protein||0),0),_={number:`M${Date.now()}`,name:r.trim(),meal_type:o,cooking_instructions:(a==null?void 0:a.trim())||null,ingredients:JSON.stringify(l),total_carbs:p,total_fat:R,total_protein:A,user_id:c.id,created_by:c.email};console.log("Attempting to insert meal data:",_);const{data:y,error:w}=await i.from("meals").insert(_).select("id").single();if(console.log("Database response from meals insert:",{newMeal:y,mealError:w}),w)throw w;if(!y||!y.id)throw new Error("Meal created, but failed to get new meal ID back from database.");s("Meal created successfully!","success"),t.reset(),await L();const b=document.querySelector('nav a[href="#meals"]');b&&b.click(),typeof window.closeEditMealModal=="function"&&window.closeEditMealModal()}catch(r){console.error("Error creating meal:",r),s(`Error: ${r.message}`,"error")}}function T(){l.length=0;const e=document.getElementById("ingredientsList");e&&(e.innerHTML="")}function s(e,t="success"){const n=document.getElementById("admin-message")||document.createElement("div");n.id="admin-message",n.className=`message ${t}`,n.textContent=e;const r=document.getElementById("admin")||document.body;n.parentElement||r.insertBefore(n,r.firstChild),n.style.display="block",setTimeout(()=>{n.style.display="none"},4e3)}window.refreshUserList=f;window.grantAdminRole=U;window.revokeAdminRole=k;window.updateRoleDisplay=v;export{U as grantAdminRole,B as initializeAdmin,f as refreshUserList,k as revokeAdminRole};
//# sourceMappingURL=admin-CtBnY5h_.js.map
