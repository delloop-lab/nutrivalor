{"version":3,"mappings":"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","names":["mealManagementInitialized","initializeAdmin","loadFoodsForIngredients","setupMealManagementEventListeners","initializeUserManagement","error","showMessage","isCurrentUserSuperAdmin","userManagementCard","refreshUserList","updateCurrentUserRoleDisplay","tableCheck","tableError","supabase","userListContainer","usersWithRoles","displayUserList","users","container","userListHtml","user","role","isConfirmed","joinDate","lastLogin","grantAdminRole","userId","currentUser","getCurrentUser","revokeAdminRole","getCurrentUserRole","__vitePreload","n","importError","data","directError","roleDisplay","displayText","allFoods","mealForm","handleAddMeal","handleClearMealForm","event","form","formData","mealName","mealType","cookingInstructions","currentMealIngredients","totalCarbs","sum","ing","totalFat","totalProtein","mealData","newMeal","mealError","reloadMeals","mealsLink","ingredientsList","message","type","messageEl"],"ignoreList":[],"sources":["../../src/js/admin.ts"],"sourcesContent":["import { supabase, getCurrentUser } from './supabase-client';\nimport { isCurrentUserAdmin, isCurrentUserSuperAdmin } from './auth';\nimport { loadAndDisplayFoods, allFoods } from './food-tracker';\nimport { openEditFoodModal, openEditMealModal, currentMealIngredients } from './simple-edit';\nimport { reloadMeals } from './meals';\n\n// --- Admin Module State ---\nlet currentFoods: any[] = [];\nlet mealManagementInitialized = false;\n\n// --- Entry Point for Admin Section ---\nexport async function initializeAdmin(): Promise<void> {\n  try {\n    console.log('üëë Initializing Admin Panel...');\n    await loadFoodsForIngredients();\n    if (!mealManagementInitialized) {\n      setupMealManagementEventListeners();\n      mealManagementInitialized = true;\n    }\n    \n    // Initialize user management\n    await initializeUserManagement();\n  } catch (error) {\n    console.error('‚ùå Error initializing admin panel:', error);\n    showMessage('Error initializing admin panel', 'error');\n  }\n}\n\n// --- User Management Functions ---\nasync function initializeUserManagement(): Promise<void> {\n  try {\n    console.log('üë• Initializing user management...');\n    \n    // Check if user is super admin\n    const isSuperAdmin = await isCurrentUserSuperAdmin();\n    if (!isSuperAdmin) {\n      console.log('‚ùå User is not super admin, hiding user management');\n      const userManagementCard = document.querySelector('.admin-card') as HTMLElement;\n      if (userManagementCard) {\n        userManagementCard.style.display = 'none';\n      }\n      return;\n    }\n    \n    // Load initial user list\n    await refreshUserList();\n    \n    // Update current user role display\n    await updateCurrentUserRoleDisplay();\n    \n  } catch (error) {\n    console.error('‚ùå Error initializing user management:', error);\n  }\n}\n\n// Function to refresh user list (called from HTML)\nexport async function refreshUserList(): Promise<void> {\n  try {\n    console.log('üîÑ Refreshing user list...');\n    \n    const isSuperAdmin = await isCurrentUserSuperAdmin();\n    if (!isSuperAdmin) {\n      console.log('‚ùå User is not super admin, cannot refresh user list');\n      return;\n    }\n    \n    // First check if user_roles table exists\n    const { data: tableCheck, error: tableError } = await supabase\n      .from('user_roles')\n      .select('user_id')\n      .limit(1);\n    \n    if (tableError && tableError.code === 'PGRST200') {\n      // Table doesn't exist, show setup message\n      const userListContainer = document.getElementById('userListContainer');\n      if (userListContainer) {\n        userListContainer.innerHTML = `\n          <div class=\"setup-message\">\n            <h3>üõ†Ô∏è Database Setup Required</h3>\n            <p>The user management system needs to be set up in your database.</p>\n            <div class=\"setup-steps\">\n              <h4>Steps to complete setup:</h4>\n              <ol>\n                <li>Go to your Supabase Dashboard</li>\n                <li>Navigate to the SQL Editor</li>\n                <li>Run the <code>create-user-roles-table.sql</code> script</li>\n                <li>Run the <code>setup-super-admin.sql</code> script</li>\n                <li>Refresh this page</li>\n              </ol>\n            </div>\n            <button onclick=\"refreshUserList()\" class=\"btn btn-primary\">Retry After Setup</button>\n          </div>\n        `;\n      }\n      return;\n    }\n    \n    // Get all users with their roles using the secure server function\n    const { data: usersWithRoles, error } = await supabase\n      .rpc('get_admin_user_list');\n    \n    if (error) throw error;\n    \n    // Display users\n    await displayUserList(usersWithRoles || []);\n    \n  } catch (error) {\n    console.error('‚ùå Error refreshing user list:', error);\n    showMessage('Error loading users', 'error');\n  }\n}\n\nasync function displayUserList(users: any[]): Promise<void> {\n  const container = document.getElementById('userListContainer');\n  if (!container) return;\n  \n  if (users.length === 0) {\n    container.innerHTML = '<div class=\"no-users\">No users found</div>';\n    return;\n  }\n  \n  const userListHtml = users.map(user => {\n    const role = user.role || 'user';\n    const isConfirmed = user.email && user.email.length > 0; // If email exists, treat as confirmed\n    const joinDate = user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Unknown';\n    const lastLogin = user.last_sign_in_at \n      ? new Date(user.last_sign_in_at).toLocaleDateString()\n      : 'Never';\n    \n    return `\n      <div class=\"user-item\">\n        <div class=\"user-info\">\n          <div class=\"user-email\">${user.email || 'Unknown'}</div>\n          <div class=\"user-meta\">\n            <span class=\"user-status ${isConfirmed ? 'confirmed' : 'pending'}\">\n              ${isConfirmed ? 'Confirmed' : 'Pending'}\n            </span>\n            <span class=\"user-join-date\">Joined: ${joinDate}</span>\n            <span class=\"user-last-login\">Last login: ${lastLogin}</span>\n          </div>\n        </div>\n        <div class=\"user-role-section\">\n          <span class=\"current-role ${role}\">${role.replace('_', '-')}</span>\n          ${role === 'user' ? \n            `<button class=\"role-btn grant\" onclick=\"grantAdminRole('${user.user_id}')\">Grant Admin</button>` :\n            `<button class=\"role-btn revoke\" onclick=\"revokeAdminRole('${user.user_id}')\">Revoke Admin</button>`\n          }\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  container.innerHTML = userListHtml;\n}\n\n// Function to grant admin role (called from HTML)\nexport async function grantAdminRole(userId: string): Promise<void> {\n  try {\n    console.log('üëë Granting admin role to user:', userId);\n    \n    const isSuperAdmin = await isCurrentUserSuperAdmin();\n    if (!isSuperAdmin) {\n      showMessage('Only super admins can grant admin roles', 'error');\n      return;\n    }\n    \n    const currentUser = await getCurrentUser();\n    if (!currentUser) {\n      showMessage('You must be logged in to perform this action', 'error');\n      return;\n    }\n    \n    // Update user role\n    const { error } = await supabase\n      .from('user_roles')\n      .upsert({\n        user_id: userId,\n        role: 'admin',\n        granted_by: currentUser.id,\n        granted_at: new Date().toISOString()\n      });\n    \n    if (error) throw error;\n    \n    showMessage('Admin role granted successfully', 'success');\n    await refreshUserList();\n    \n  } catch (error) {\n    console.error('‚ùå Error granting admin role:', error);\n    showMessage('Error granting admin role', 'error');\n  }\n}\n\n// Function to revoke admin role (called from HTML)\nexport async function revokeAdminRole(userId: string): Promise<void> {\n  try {\n    console.log('üëë Revoking admin role from user:', userId);\n    \n    const isSuperAdmin = await isCurrentUserSuperAdmin();\n    if (!isSuperAdmin) {\n      showMessage('Only super admins can revoke admin roles', 'error');\n      return;\n    }\n    \n    const currentUser = await getCurrentUser();\n    if (!currentUser) {\n      showMessage('You must be logged in to perform this action', 'error');\n      return;\n    }\n    \n    // Update user role back to user\n    const { error } = await supabase\n      .from('user_roles')\n      .upsert({\n        user_id: userId,\n        role: 'user',\n        granted_by: currentUser.id,\n        granted_at: new Date().toISOString()\n      });\n    \n    if (error) throw error;\n    \n    showMessage('Admin role revoked successfully', 'success');\n    await refreshUserList();\n    \n  } catch (error) {\n    console.error('‚ùå Error revoking admin role:', error);\n    showMessage('Error revoking admin role', 'error');\n  }\n}\n\n// Function to update current user role display\nasync function updateCurrentUserRoleDisplay(): Promise<void> {\n  try {\n    console.log('üîÑ Updating current user role display...');\n    \n    // Try to get role directly from auth module\n    let role = 'user'; // default fallback\n    \n    try {\n      const { getCurrentUserRole } = await import('./auth');\n      role = await getCurrentUserRole();\n      console.log('‚úÖ Got user role:', role);\n    } catch (importError) {\n      console.warn('‚ö†Ô∏è Could not import getCurrentUserRole, trying direct approach:', importError);\n      \n      // Fallback: try to get role directly\n      try {\n        const user = await getCurrentUser();\n        if (user) {\n          const { data, error } = await supabase\n            .from('user_roles')\n            .select('role')\n            .eq('user_id', user.id)\n            .single();\n          \n          if (!error && data) {\n            role = data.role;\n            console.log('‚úÖ Got user role via direct query:', role);\n          } else {\n            console.log('‚ÑπÔ∏è No role record found, using default: user');\n          }\n        }\n      } catch (directError) {\n        console.error('‚ùå Direct role query failed:', directError);\n      }\n    }\n    \n    const roleDisplay = document.getElementById('currentUserRole');\n    if (roleDisplay) {\n      const displayText = role.replace('_', ' ').toUpperCase();\n      roleDisplay.textContent = displayText;\n      roleDisplay.className = `role-badge ${role}`;\n      console.log('‚úÖ Updated role display to:', displayText);\n    } else {\n      console.error('‚ùå Role display element not found');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Error updating role display:', error);\n    \n    // Set a fallback display\n    const roleDisplay = document.getElementById('currentUserRole');\n    if (roleDisplay) {\n      roleDisplay.textContent = 'ERROR';\n      roleDisplay.className = 'role-badge error';\n    }\n  }\n}\n\n// --- Data Loading ---\nasync function loadFoodsForIngredients(): Promise<void> {\n  if (allFoods.length > 0) return; // Use global allFoods from food-tracker\n  try {\n    const { data, error } = await supabase.from('foods').select('*').order('name');\n    if (error) throw error;\n    allFoods.push(...(data || []));\n    console.log(`üì¶ Loaded ${allFoods.length} foods for admin use.`);\n  } catch (error) {\n    console.error('Error loading foods for ingredients:', error);\n  }\n}\n\n// --- Event Listener Setup ---\nfunction setupMealManagementEventListeners(): void {\n  const mealForm = document.getElementById('addMealForm') as HTMLFormElement;\n  if (mealForm) {\n    mealForm.addEventListener('submit', handleAddMeal);\n    mealForm.addEventListener('reset', handleClearMealForm);\n  }\n}\n\n// --- Core Logic: Create Meal ---\nasync function handleAddMeal(event: Event): Promise<void> {\n  event.preventDefault();\n  const form = event.target as HTMLFormElement;\n  const formData = new FormData(form);\n\n  try {\n    const mealName = formData.get('mealName') as string;\n    const mealType = formData.get('mealType') as string;\n    const cookingInstructions = formData.get('cookingInstructions') as string;\n\n    const user = await getCurrentUser();\n    if (!user) throw new Error(\"You must be logged in to create a meal.\");\n\n    if (currentMealIngredients.length === 0) {\n      showMessage('Please add at least one ingredient.', 'error');\n      return;\n    }\n\n    const totalCarbs = currentMealIngredients.reduce((sum, ing) => sum + (ing.carbs || 0), 0);\n    const totalFat = currentMealIngredients.reduce((sum, ing) => sum + (ing.fat || 0), 0);\n    const totalProtein = currentMealIngredients.reduce((sum, ing) => sum + (ing.protein || 0), 0);\n\n    const mealData = {\n      number: `M${Date.now()}`,\n      name: mealName.trim(),\n      meal_type: mealType,\n      cooking_instructions: cookingInstructions?.trim() || null,\n      ingredients: JSON.stringify(currentMealIngredients),\n      total_carbs: totalCarbs,\n      total_fat: totalFat,\n      total_protein: totalProtein,\n      user_id: user.id,\n      created_by: user.email,\n    };\n\n    console.log('Attempting to insert meal data:', mealData);\n    const { data: newMeal, error: mealError } = await supabase\n      .from('meals')\n      .insert(mealData)\n      .select('id')\n      .single();\n\n    console.log('Database response from meals insert:', { newMeal, mealError });\n    if (mealError) throw mealError;\n    if (!newMeal || !newMeal.id) throw new Error(\"Meal created, but failed to get new meal ID back from database.\");\n\n    showMessage('Meal created successfully!', 'success');\n    form.reset();\n    await reloadMeals();\n    const mealsLink = document.querySelector('nav a[href=\"#meals\"]') as HTMLElement;\n    if (mealsLink) mealsLink.click();\n    if (typeof window.closeEditMealModal === 'function') {\n      window.closeEditMealModal();\n    }\n\n  } catch (error) {\n    console.error('Error creating meal:', error);\n    showMessage(`Error: ${(error as Error).message}`, 'error');\n  }\n}\n\n// --- Form and UI Helpers ---\nfunction handleClearMealForm(): void {\n  currentMealIngredients.length = 0;\n  const ingredientsList = document.getElementById('ingredientsList');\n  if (ingredientsList) ingredientsList.innerHTML = '';\n}\n\nfunction showMessage(message: string, type: 'success' | 'error' = 'success'): void {\n  const messageEl = document.getElementById('admin-message') || document.createElement('div');\n  messageEl.id = 'admin-message';\n  messageEl.className = `message ${type}`;\n  messageEl.textContent = message;\n\n  const container = document.getElementById('admin') || document.body;\n  if (!messageEl.parentElement) {\n      container.insertBefore(messageEl, container.firstChild);\n  }\n  \n  messageEl.style.display = 'block';\n  setTimeout(() => { messageEl.style.display = 'none'; }, 4000);\n}\n\n// --- Functions to be attached to window ---\n// Make functions available globally\ndeclare global {\n  interface Window {\n    refreshUserList: () => Promise<void>;\n    grantAdminRole: (userId: string) => Promise<void>;\n    revokeAdminRole: (userId: string) => Promise<void>;\n    updateRoleDisplay: () => Promise<void>;\n  }\n}\n\n// Attach functions to window object\nwindow.refreshUserList = refreshUserList;\nwindow.grantAdminRole = grantAdminRole;\nwindow.revokeAdminRole = revokeAdminRole;\n\n// Add debug function to manually update role display\nwindow.updateRoleDisplay = updateCurrentUserRoleDisplay; "],"file":"assets/admin-CtBnY5h_.js"}